// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ql2.proto

package com.rethinkdb;

public final class QL2 {
  private QL2() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface VersionDummyOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code VersionDummy}
   *
   * <pre>
   * This enum contains the magic numbers for your version.  See **THE HIGH-LEVEL
   * VIEW** for what to do with it.
   * </pre>
   */
  public static final class VersionDummy extends
      com.google.protobuf.GeneratedMessage
      implements VersionDummyOrBuilder {
    // Use VersionDummy.newBuilder() to construct.
    private VersionDummy(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private VersionDummy(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final VersionDummy defaultInstance;
    public static VersionDummy getDefaultInstance() {
      return defaultInstance;
    }

    public VersionDummy getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private VersionDummy(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.rethinkdb.QL2.internal_static_VersionDummy_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.rethinkdb.QL2.internal_static_VersionDummy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.rethinkdb.QL2.VersionDummy.class, com.rethinkdb.QL2.VersionDummy.Builder.class);
    }

    public static com.google.protobuf.Parser<VersionDummy> PARSER =
        new com.google.protobuf.AbstractParser<VersionDummy>() {
      public VersionDummy parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new VersionDummy(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<VersionDummy> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code VersionDummy.Version}
     *
     * <pre>
     * non-conforming protobuf libraries
     * </pre>
     */
    public enum Version
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>V0_1 = 1063369270;</code>
       */
      V0_1(0, 1063369270),
      ;

      /**
       * <code>V0_1 = 1063369270;</code>
       */
      public static final int V0_1_VALUE = 1063369270;


      public final int getNumber() { return value; }

      public static Version valueOf(int value) {
        switch (value) {
          case 1063369270: return V0_1;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Version>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Version>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Version>() {
              public Version findValueByNumber(int number) {
                return Version.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.rethinkdb.QL2.VersionDummy.getDescriptor().getEnumTypes().get(0);
      }

      private static final Version[] VALUES = values();

      public static Version valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Version(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:VersionDummy.Version)
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.rethinkdb.QL2.VersionDummy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.rethinkdb.QL2.VersionDummy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.rethinkdb.QL2.VersionDummy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.rethinkdb.QL2.VersionDummy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.rethinkdb.QL2.VersionDummy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.rethinkdb.QL2.VersionDummy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.rethinkdb.QL2.VersionDummy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.rethinkdb.QL2.VersionDummy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.rethinkdb.QL2.VersionDummy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.rethinkdb.QL2.VersionDummy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.rethinkdb.QL2.VersionDummy prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code VersionDummy}
     *
     * <pre>
     * This enum contains the magic numbers for your version.  See **THE HIGH-LEVEL
     * VIEW** for what to do with it.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.rethinkdb.QL2.VersionDummyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.rethinkdb.QL2.internal_static_VersionDummy_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.rethinkdb.QL2.internal_static_VersionDummy_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.rethinkdb.QL2.VersionDummy.class, com.rethinkdb.QL2.VersionDummy.Builder.class);
      }

      // Construct using com.rethinkdb.QL2.VersionDummy.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.rethinkdb.QL2.internal_static_VersionDummy_descriptor;
      }

      public com.rethinkdb.QL2.VersionDummy getDefaultInstanceForType() {
        return com.rethinkdb.QL2.VersionDummy.getDefaultInstance();
      }

      public com.rethinkdb.QL2.VersionDummy build() {
        com.rethinkdb.QL2.VersionDummy result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.rethinkdb.QL2.VersionDummy buildPartial() {
        com.rethinkdb.QL2.VersionDummy result = new com.rethinkdb.QL2.VersionDummy(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.rethinkdb.QL2.VersionDummy) {
          return mergeFrom((com.rethinkdb.QL2.VersionDummy)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.rethinkdb.QL2.VersionDummy other) {
        if (other == com.rethinkdb.QL2.VersionDummy.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.rethinkdb.QL2.VersionDummy parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.rethinkdb.QL2.VersionDummy) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:VersionDummy)
    }

    static {
      defaultInstance = new VersionDummy(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:VersionDummy)
  }

  public interface QueryOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .Query.QueryType type = 1;
    /**
     * <code>optional .Query.QueryType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional .Query.QueryType type = 1;</code>
     */
    com.rethinkdb.QL2.Query.QueryType getType();

    // optional .Term query = 2;
    /**
     * <code>optional .Term query = 2;</code>
     *
     * <pre>
     * A [Term] is how we represent the operations we want a query to perform.
     * </pre>
     */
    boolean hasQuery();
    /**
     * <code>optional .Term query = 2;</code>
     *
     * <pre>
     * A [Term] is how we represent the operations we want a query to perform.
     * </pre>
     */
    com.rethinkdb.QL2.Term getQuery();
    /**
     * <code>optional .Term query = 2;</code>
     *
     * <pre>
     * A [Term] is how we represent the operations we want a query to perform.
     * </pre>
     */
    com.rethinkdb.QL2.TermOrBuilder getQueryOrBuilder();

    // optional int64 token = 3;
    /**
     * <code>optional int64 token = 3;</code>
     */
    boolean hasToken();
    /**
     * <code>optional int64 token = 3;</code>
     */
    long getToken();

    // optional bool OBSOLETE_noreply = 4 [default = false];
    /**
     * <code>optional bool OBSOLETE_noreply = 4 [default = false];</code>
     *
     * <pre>
     * This flag is ignored on the server.  `noreply` should be added
     * to `global_optargs` instead (the key "noreply" should map to
     * either true or false).
     * </pre>
     */
    boolean hasOBSOLETENoreply();
    /**
     * <code>optional bool OBSOLETE_noreply = 4 [default = false];</code>
     *
     * <pre>
     * This flag is ignored on the server.  `noreply` should be added
     * to `global_optargs` instead (the key "noreply" should map to
     * either true or false).
     * </pre>
     */
    boolean getOBSOLETENoreply();

    // repeated .Query.AssocPair global_optargs = 6;
    /**
     * <code>repeated .Query.AssocPair global_optargs = 6;</code>
     */
    java.util.List<com.rethinkdb.QL2.Query.AssocPair> 
        getGlobalOptargsList();
    /**
     * <code>repeated .Query.AssocPair global_optargs = 6;</code>
     */
    com.rethinkdb.QL2.Query.AssocPair getGlobalOptargs(int index);
    /**
     * <code>repeated .Query.AssocPair global_optargs = 6;</code>
     */
    int getGlobalOptargsCount();
    /**
     * <code>repeated .Query.AssocPair global_optargs = 6;</code>
     */
    java.util.List<? extends com.rethinkdb.QL2.Query.AssocPairOrBuilder> 
        getGlobalOptargsOrBuilderList();
    /**
     * <code>repeated .Query.AssocPair global_optargs = 6;</code>
     */
    com.rethinkdb.QL2.Query.AssocPairOrBuilder getGlobalOptargsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code Query}
   *
   * <pre>
   * You send one of:
   * * A [START] query with a [Term] to evaluate and a unique-per-connection token.
   * * A [CONTINUE] query with the same token as a [START] query that returned
   *   [SUCCESS_PARTIAL] in its [Response].
   * * A [STOP] query with the same token as a [START] query that you want to stop.
   * </pre>
   */
  public static final class Query extends
      com.google.protobuf.GeneratedMessage
      implements QueryOrBuilder {
    // Use Query.newBuilder() to construct.
    private Query(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Query(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Query defaultInstance;
    public static Query getDefaultInstance() {
      return defaultInstance;
    }

    public Query getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Query(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.rethinkdb.QL2.Query.QueryType value = com.rethinkdb.QL2.Query.QueryType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              com.rethinkdb.QL2.Term.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = query_.toBuilder();
              }
              query_ = input.readMessage(com.rethinkdb.QL2.Term.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(query_);
                query_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              token_ = input.readInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              oBSOLETENoreply_ = input.readBool();
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                globalOptargs_ = new java.util.ArrayList<com.rethinkdb.QL2.Query.AssocPair>();
                mutable_bitField0_ |= 0x00000010;
              }
              globalOptargs_.add(input.readMessage(com.rethinkdb.QL2.Query.AssocPair.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          globalOptargs_ = java.util.Collections.unmodifiableList(globalOptargs_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.rethinkdb.QL2.internal_static_Query_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.rethinkdb.QL2.internal_static_Query_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.rethinkdb.QL2.Query.class, com.rethinkdb.QL2.Query.Builder.class);
    }

    public static com.google.protobuf.Parser<Query> PARSER =
        new com.google.protobuf.AbstractParser<Query>() {
      public Query parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Query(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Query> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code Query.QueryType}
     */
    public enum QueryType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>START = 1;</code>
       *
       * <pre>
       * Start a new query.
       * </pre>
       */
      START(0, 1),
      /**
       * <code>CONTINUE = 2;</code>
       *
       * <pre>
       * Continue a query that returned [SUCCESS_PARTIAL]
       * </pre>
       */
      CONTINUE(1, 2),
      /**
       * <code>STOP = 3;</code>
       *
       * <pre>
       * (see [Response]).
       * </pre>
       */
      STOP(2, 3),
      ;

      /**
       * <code>START = 1;</code>
       *
       * <pre>
       * Start a new query.
       * </pre>
       */
      public static final int START_VALUE = 1;
      /**
       * <code>CONTINUE = 2;</code>
       *
       * <pre>
       * Continue a query that returned [SUCCESS_PARTIAL]
       * </pre>
       */
      public static final int CONTINUE_VALUE = 2;
      /**
       * <code>STOP = 3;</code>
       *
       * <pre>
       * (see [Response]).
       * </pre>
       */
      public static final int STOP_VALUE = 3;


      public final int getNumber() { return value; }

      public static QueryType valueOf(int value) {
        switch (value) {
          case 1: return START;
          case 2: return CONTINUE;
          case 3: return STOP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<QueryType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<QueryType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<QueryType>() {
              public QueryType findValueByNumber(int number) {
                return QueryType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.rethinkdb.QL2.Query.getDescriptor().getEnumTypes().get(0);
      }

      private static final QueryType[] VALUES = values();

      public static QueryType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private QueryType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:Query.QueryType)
    }

    public interface AssocPairOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional string key = 1;
      /**
       * <code>optional string key = 1;</code>
       */
      boolean hasKey();
      /**
       * <code>optional string key = 1;</code>
       */
      java.lang.String getKey();
      /**
       * <code>optional string key = 1;</code>
       */
      com.google.protobuf.ByteString
          getKeyBytes();

      // optional .Term val = 2;
      /**
       * <code>optional .Term val = 2;</code>
       */
      boolean hasVal();
      /**
       * <code>optional .Term val = 2;</code>
       */
      com.rethinkdb.QL2.Term getVal();
      /**
       * <code>optional .Term val = 2;</code>
       */
      com.rethinkdb.QL2.TermOrBuilder getValOrBuilder();
    }
    /**
     * Protobuf type {@code Query.AssocPair}
     */
    public static final class AssocPair extends
        com.google.protobuf.GeneratedMessage
        implements AssocPairOrBuilder {
      // Use AssocPair.newBuilder() to construct.
      private AssocPair(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AssocPair(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AssocPair defaultInstance;
      public static AssocPair getDefaultInstance() {
        return defaultInstance;
      }

      public AssocPair getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AssocPair(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                key_ = input.readBytes();
                break;
              }
              case 18: {
                com.rethinkdb.QL2.Term.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = val_.toBuilder();
                }
                val_ = input.readMessage(com.rethinkdb.QL2.Term.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(val_);
                  val_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.rethinkdb.QL2.internal_static_Query_AssocPair_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.rethinkdb.QL2.internal_static_Query_AssocPair_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.rethinkdb.QL2.Query.AssocPair.class, com.rethinkdb.QL2.Query.AssocPair.Builder.class);
      }

      public static com.google.protobuf.Parser<AssocPair> PARSER =
          new com.google.protobuf.AbstractParser<AssocPair>() {
        public AssocPair parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AssocPair(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AssocPair> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional string key = 1;
      public static final int KEY_FIELD_NUMBER = 1;
      private java.lang.Object key_;
      /**
       * <code>optional string key = 1;</code>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string key = 1;</code>
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            key_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string key = 1;</code>
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // optional .Term val = 2;
      public static final int VAL_FIELD_NUMBER = 2;
      private com.rethinkdb.QL2.Term val_;
      /**
       * <code>optional .Term val = 2;</code>
       */
      public boolean hasVal() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .Term val = 2;</code>
       */
      public com.rethinkdb.QL2.Term getVal() {
        return val_;
      }
      /**
       * <code>optional .Term val = 2;</code>
       */
      public com.rethinkdb.QL2.TermOrBuilder getValOrBuilder() {
        return val_;
      }

      private void initFields() {
        key_ = "";
        val_ = com.rethinkdb.QL2.Term.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasVal()) {
          if (!getVal().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getKeyBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, val_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getKeyBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, val_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.rethinkdb.QL2.Query.AssocPair parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.rethinkdb.QL2.Query.AssocPair parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.rethinkdb.QL2.Query.AssocPair parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.rethinkdb.QL2.Query.AssocPair parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.rethinkdb.QL2.Query.AssocPair parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.rethinkdb.QL2.Query.AssocPair parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.rethinkdb.QL2.Query.AssocPair parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.rethinkdb.QL2.Query.AssocPair parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.rethinkdb.QL2.Query.AssocPair parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.rethinkdb.QL2.Query.AssocPair parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.rethinkdb.QL2.Query.AssocPair prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code Query.AssocPair}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.rethinkdb.QL2.Query.AssocPairOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.rethinkdb.QL2.internal_static_Query_AssocPair_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.rethinkdb.QL2.internal_static_Query_AssocPair_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.rethinkdb.QL2.Query.AssocPair.class, com.rethinkdb.QL2.Query.AssocPair.Builder.class);
        }

        // Construct using com.rethinkdb.QL2.Query.AssocPair.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getValFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          key_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          if (valBuilder_ == null) {
            val_ = com.rethinkdb.QL2.Term.getDefaultInstance();
          } else {
            valBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.rethinkdb.QL2.internal_static_Query_AssocPair_descriptor;
        }

        public com.rethinkdb.QL2.Query.AssocPair getDefaultInstanceForType() {
          return com.rethinkdb.QL2.Query.AssocPair.getDefaultInstance();
        }

        public com.rethinkdb.QL2.Query.AssocPair build() {
          com.rethinkdb.QL2.Query.AssocPair result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.rethinkdb.QL2.Query.AssocPair buildPartial() {
          com.rethinkdb.QL2.Query.AssocPair result = new com.rethinkdb.QL2.Query.AssocPair(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.key_ = key_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (valBuilder_ == null) {
            result.val_ = val_;
          } else {
            result.val_ = valBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.rethinkdb.QL2.Query.AssocPair) {
            return mergeFrom((com.rethinkdb.QL2.Query.AssocPair)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.rethinkdb.QL2.Query.AssocPair other) {
          if (other == com.rethinkdb.QL2.Query.AssocPair.getDefaultInstance()) return this;
          if (other.hasKey()) {
            bitField0_ |= 0x00000001;
            key_ = other.key_;
            onChanged();
          }
          if (other.hasVal()) {
            mergeVal(other.getVal());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasVal()) {
            if (!getVal().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.rethinkdb.QL2.Query.AssocPair parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.rethinkdb.QL2.Query.AssocPair) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional string key = 1;
        private java.lang.Object key_ = "";
        /**
         * <code>optional string key = 1;</code>
         */
        public boolean hasKey() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string key = 1;</code>
         */
        public java.lang.String getKey() {
          java.lang.Object ref = key_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            key_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string key = 1;</code>
         */
        public com.google.protobuf.ByteString
            getKeyBytes() {
          java.lang.Object ref = key_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            key_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string key = 1;</code>
         */
        public Builder setKey(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          key_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string key = 1;</code>
         */
        public Builder clearKey() {
          bitField0_ = (bitField0_ & ~0x00000001);
          key_ = getDefaultInstance().getKey();
          onChanged();
          return this;
        }
        /**
         * <code>optional string key = 1;</code>
         */
        public Builder setKeyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          key_ = value;
          onChanged();
          return this;
        }

        // optional .Term val = 2;
        private com.rethinkdb.QL2.Term val_ = com.rethinkdb.QL2.Term.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            com.rethinkdb.QL2.Term, com.rethinkdb.QL2.Term.Builder, com.rethinkdb.QL2.TermOrBuilder> valBuilder_;
        /**
         * <code>optional .Term val = 2;</code>
         */
        public boolean hasVal() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .Term val = 2;</code>
         */
        public com.rethinkdb.QL2.Term getVal() {
          if (valBuilder_ == null) {
            return val_;
          } else {
            return valBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .Term val = 2;</code>
         */
        public Builder setVal(com.rethinkdb.QL2.Term value) {
          if (valBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            val_ = value;
            onChanged();
          } else {
            valBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .Term val = 2;</code>
         */
        public Builder setVal(
            com.rethinkdb.QL2.Term.Builder builderForValue) {
          if (valBuilder_ == null) {
            val_ = builderForValue.build();
            onChanged();
          } else {
            valBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .Term val = 2;</code>
         */
        public Builder mergeVal(com.rethinkdb.QL2.Term value) {
          if (valBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                val_ != com.rethinkdb.QL2.Term.getDefaultInstance()) {
              val_ =
                com.rethinkdb.QL2.Term.newBuilder(val_).mergeFrom(value).buildPartial();
            } else {
              val_ = value;
            }
            onChanged();
          } else {
            valBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .Term val = 2;</code>
         */
        public Builder clearVal() {
          if (valBuilder_ == null) {
            val_ = com.rethinkdb.QL2.Term.getDefaultInstance();
            onChanged();
          } else {
            valBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .Term val = 2;</code>
         */
        public com.rethinkdb.QL2.Term.Builder getValBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getValFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .Term val = 2;</code>
         */
        public com.rethinkdb.QL2.TermOrBuilder getValOrBuilder() {
          if (valBuilder_ != null) {
            return valBuilder_.getMessageOrBuilder();
          } else {
            return val_;
          }
        }
        /**
         * <code>optional .Term val = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.rethinkdb.QL2.Term, com.rethinkdb.QL2.Term.Builder, com.rethinkdb.QL2.TermOrBuilder> 
            getValFieldBuilder() {
          if (valBuilder_ == null) {
            valBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.rethinkdb.QL2.Term, com.rethinkdb.QL2.Term.Builder, com.rethinkdb.QL2.TermOrBuilder>(
                    val_,
                    getParentForChildren(),
                    isClean());
            val_ = null;
          }
          return valBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:Query.AssocPair)
      }

      static {
        defaultInstance = new AssocPair(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:Query.AssocPair)
    }

    private int bitField0_;
    // optional .Query.QueryType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private com.rethinkdb.QL2.Query.QueryType type_;
    /**
     * <code>optional .Query.QueryType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .Query.QueryType type = 1;</code>
     */
    public com.rethinkdb.QL2.Query.QueryType getType() {
      return type_;
    }

    // optional .Term query = 2;
    public static final int QUERY_FIELD_NUMBER = 2;
    private com.rethinkdb.QL2.Term query_;
    /**
     * <code>optional .Term query = 2;</code>
     *
     * <pre>
     * A [Term] is how we represent the operations we want a query to perform.
     * </pre>
     */
    public boolean hasQuery() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .Term query = 2;</code>
     *
     * <pre>
     * A [Term] is how we represent the operations we want a query to perform.
     * </pre>
     */
    public com.rethinkdb.QL2.Term getQuery() {
      return query_;
    }
    /**
     * <code>optional .Term query = 2;</code>
     *
     * <pre>
     * A [Term] is how we represent the operations we want a query to perform.
     * </pre>
     */
    public com.rethinkdb.QL2.TermOrBuilder getQueryOrBuilder() {
      return query_;
    }

    // optional int64 token = 3;
    public static final int TOKEN_FIELD_NUMBER = 3;
    private long token_;
    /**
     * <code>optional int64 token = 3;</code>
     */
    public boolean hasToken() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int64 token = 3;</code>
     */
    public long getToken() {
      return token_;
    }

    // optional bool OBSOLETE_noreply = 4 [default = false];
    public static final int OBSOLETE_NOREPLY_FIELD_NUMBER = 4;
    private boolean oBSOLETENoreply_;
    /**
     * <code>optional bool OBSOLETE_noreply = 4 [default = false];</code>
     *
     * <pre>
     * This flag is ignored on the server.  `noreply` should be added
     * to `global_optargs` instead (the key "noreply" should map to
     * either true or false).
     * </pre>
     */
    public boolean hasOBSOLETENoreply() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool OBSOLETE_noreply = 4 [default = false];</code>
     *
     * <pre>
     * This flag is ignored on the server.  `noreply` should be added
     * to `global_optargs` instead (the key "noreply" should map to
     * either true or false).
     * </pre>
     */
    public boolean getOBSOLETENoreply() {
      return oBSOLETENoreply_;
    }

    // repeated .Query.AssocPair global_optargs = 6;
    public static final int GLOBAL_OPTARGS_FIELD_NUMBER = 6;
    private java.util.List<com.rethinkdb.QL2.Query.AssocPair> globalOptargs_;
    /**
     * <code>repeated .Query.AssocPair global_optargs = 6;</code>
     */
    public java.util.List<com.rethinkdb.QL2.Query.AssocPair> getGlobalOptargsList() {
      return globalOptargs_;
    }
    /**
     * <code>repeated .Query.AssocPair global_optargs = 6;</code>
     */
    public java.util.List<? extends com.rethinkdb.QL2.Query.AssocPairOrBuilder> 
        getGlobalOptargsOrBuilderList() {
      return globalOptargs_;
    }
    /**
     * <code>repeated .Query.AssocPair global_optargs = 6;</code>
     */
    public int getGlobalOptargsCount() {
      return globalOptargs_.size();
    }
    /**
     * <code>repeated .Query.AssocPair global_optargs = 6;</code>
     */
    public com.rethinkdb.QL2.Query.AssocPair getGlobalOptargs(int index) {
      return globalOptargs_.get(index);
    }
    /**
     * <code>repeated .Query.AssocPair global_optargs = 6;</code>
     */
    public com.rethinkdb.QL2.Query.AssocPairOrBuilder getGlobalOptargsOrBuilder(
        int index) {
      return globalOptargs_.get(index);
    }

    private void initFields() {
      type_ = com.rethinkdb.QL2.Query.QueryType.START;
      query_ = com.rethinkdb.QL2.Term.getDefaultInstance();
      token_ = 0L;
      oBSOLETENoreply_ = false;
      globalOptargs_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (hasQuery()) {
        if (!getQuery().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getGlobalOptargsCount(); i++) {
        if (!getGlobalOptargs(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, query_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, token_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, oBSOLETENoreply_);
      }
      for (int i = 0; i < globalOptargs_.size(); i++) {
        output.writeMessage(6, globalOptargs_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, query_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, token_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, oBSOLETENoreply_);
      }
      for (int i = 0; i < globalOptargs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, globalOptargs_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.rethinkdb.QL2.Query parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.rethinkdb.QL2.Query parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Query parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.rethinkdb.QL2.Query parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Query parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.rethinkdb.QL2.Query parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Query parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.rethinkdb.QL2.Query parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Query parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.rethinkdb.QL2.Query parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.rethinkdb.QL2.Query prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Query}
     *
     * <pre>
     * You send one of:
     * * A [START] query with a [Term] to evaluate and a unique-per-connection token.
     * * A [CONTINUE] query with the same token as a [START] query that returned
     *   [SUCCESS_PARTIAL] in its [Response].
     * * A [STOP] query with the same token as a [START] query that you want to stop.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.rethinkdb.QL2.QueryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.rethinkdb.QL2.internal_static_Query_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.rethinkdb.QL2.internal_static_Query_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.rethinkdb.QL2.Query.class, com.rethinkdb.QL2.Query.Builder.class);
      }

      // Construct using com.rethinkdb.QL2.Query.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getQueryFieldBuilder();
          getGlobalOptargsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = com.rethinkdb.QL2.Query.QueryType.START;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (queryBuilder_ == null) {
          query_ = com.rethinkdb.QL2.Term.getDefaultInstance();
        } else {
          queryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        token_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        oBSOLETENoreply_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (globalOptargsBuilder_ == null) {
          globalOptargs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          globalOptargsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.rethinkdb.QL2.internal_static_Query_descriptor;
      }

      public com.rethinkdb.QL2.Query getDefaultInstanceForType() {
        return com.rethinkdb.QL2.Query.getDefaultInstance();
      }

      public com.rethinkdb.QL2.Query build() {
        com.rethinkdb.QL2.Query result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.rethinkdb.QL2.Query buildPartial() {
        com.rethinkdb.QL2.Query result = new com.rethinkdb.QL2.Query(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (queryBuilder_ == null) {
          result.query_ = query_;
        } else {
          result.query_ = queryBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.token_ = token_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.oBSOLETENoreply_ = oBSOLETENoreply_;
        if (globalOptargsBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            globalOptargs_ = java.util.Collections.unmodifiableList(globalOptargs_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.globalOptargs_ = globalOptargs_;
        } else {
          result.globalOptargs_ = globalOptargsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.rethinkdb.QL2.Query) {
          return mergeFrom((com.rethinkdb.QL2.Query)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.rethinkdb.QL2.Query other) {
        if (other == com.rethinkdb.QL2.Query.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasQuery()) {
          mergeQuery(other.getQuery());
        }
        if (other.hasToken()) {
          setToken(other.getToken());
        }
        if (other.hasOBSOLETENoreply()) {
          setOBSOLETENoreply(other.getOBSOLETENoreply());
        }
        if (globalOptargsBuilder_ == null) {
          if (!other.globalOptargs_.isEmpty()) {
            if (globalOptargs_.isEmpty()) {
              globalOptargs_ = other.globalOptargs_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureGlobalOptargsIsMutable();
              globalOptargs_.addAll(other.globalOptargs_);
            }
            onChanged();
          }
        } else {
          if (!other.globalOptargs_.isEmpty()) {
            if (globalOptargsBuilder_.isEmpty()) {
              globalOptargsBuilder_.dispose();
              globalOptargsBuilder_ = null;
              globalOptargs_ = other.globalOptargs_;
              bitField0_ = (bitField0_ & ~0x00000010);
              globalOptargsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getGlobalOptargsFieldBuilder() : null;
            } else {
              globalOptargsBuilder_.addAllMessages(other.globalOptargs_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasQuery()) {
          if (!getQuery().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getGlobalOptargsCount(); i++) {
          if (!getGlobalOptargs(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.rethinkdb.QL2.Query parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.rethinkdb.QL2.Query) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .Query.QueryType type = 1;
      private com.rethinkdb.QL2.Query.QueryType type_ = com.rethinkdb.QL2.Query.QueryType.START;
      /**
       * <code>optional .Query.QueryType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .Query.QueryType type = 1;</code>
       */
      public com.rethinkdb.QL2.Query.QueryType getType() {
        return type_;
      }
      /**
       * <code>optional .Query.QueryType type = 1;</code>
       */
      public Builder setType(com.rethinkdb.QL2.Query.QueryType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .Query.QueryType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.rethinkdb.QL2.Query.QueryType.START;
        onChanged();
        return this;
      }

      // optional .Term query = 2;
      private com.rethinkdb.QL2.Term query_ = com.rethinkdb.QL2.Term.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.rethinkdb.QL2.Term, com.rethinkdb.QL2.Term.Builder, com.rethinkdb.QL2.TermOrBuilder> queryBuilder_;
      /**
       * <code>optional .Term query = 2;</code>
       *
       * <pre>
       * A [Term] is how we represent the operations we want a query to perform.
       * </pre>
       */
      public boolean hasQuery() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .Term query = 2;</code>
       *
       * <pre>
       * A [Term] is how we represent the operations we want a query to perform.
       * </pre>
       */
      public com.rethinkdb.QL2.Term getQuery() {
        if (queryBuilder_ == null) {
          return query_;
        } else {
          return queryBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .Term query = 2;</code>
       *
       * <pre>
       * A [Term] is how we represent the operations we want a query to perform.
       * </pre>
       */
      public Builder setQuery(com.rethinkdb.QL2.Term value) {
        if (queryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          query_ = value;
          onChanged();
        } else {
          queryBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .Term query = 2;</code>
       *
       * <pre>
       * A [Term] is how we represent the operations we want a query to perform.
       * </pre>
       */
      public Builder setQuery(
          com.rethinkdb.QL2.Term.Builder builderForValue) {
        if (queryBuilder_ == null) {
          query_ = builderForValue.build();
          onChanged();
        } else {
          queryBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .Term query = 2;</code>
       *
       * <pre>
       * A [Term] is how we represent the operations we want a query to perform.
       * </pre>
       */
      public Builder mergeQuery(com.rethinkdb.QL2.Term value) {
        if (queryBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              query_ != com.rethinkdb.QL2.Term.getDefaultInstance()) {
            query_ =
              com.rethinkdb.QL2.Term.newBuilder(query_).mergeFrom(value).buildPartial();
          } else {
            query_ = value;
          }
          onChanged();
        } else {
          queryBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .Term query = 2;</code>
       *
       * <pre>
       * A [Term] is how we represent the operations we want a query to perform.
       * </pre>
       */
      public Builder clearQuery() {
        if (queryBuilder_ == null) {
          query_ = com.rethinkdb.QL2.Term.getDefaultInstance();
          onChanged();
        } else {
          queryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .Term query = 2;</code>
       *
       * <pre>
       * A [Term] is how we represent the operations we want a query to perform.
       * </pre>
       */
      public com.rethinkdb.QL2.Term.Builder getQueryBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getQueryFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Term query = 2;</code>
       *
       * <pre>
       * A [Term] is how we represent the operations we want a query to perform.
       * </pre>
       */
      public com.rethinkdb.QL2.TermOrBuilder getQueryOrBuilder() {
        if (queryBuilder_ != null) {
          return queryBuilder_.getMessageOrBuilder();
        } else {
          return query_;
        }
      }
      /**
       * <code>optional .Term query = 2;</code>
       *
       * <pre>
       * A [Term] is how we represent the operations we want a query to perform.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.rethinkdb.QL2.Term, com.rethinkdb.QL2.Term.Builder, com.rethinkdb.QL2.TermOrBuilder> 
          getQueryFieldBuilder() {
        if (queryBuilder_ == null) {
          queryBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.rethinkdb.QL2.Term, com.rethinkdb.QL2.Term.Builder, com.rethinkdb.QL2.TermOrBuilder>(
                  query_,
                  getParentForChildren(),
                  isClean());
          query_ = null;
        }
        return queryBuilder_;
      }

      // optional int64 token = 3;
      private long token_ ;
      /**
       * <code>optional int64 token = 3;</code>
       */
      public boolean hasToken() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int64 token = 3;</code>
       */
      public long getToken() {
        return token_;
      }
      /**
       * <code>optional int64 token = 3;</code>
       */
      public Builder setToken(long value) {
        bitField0_ |= 0x00000004;
        token_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 token = 3;</code>
       */
      public Builder clearToken() {
        bitField0_ = (bitField0_ & ~0x00000004);
        token_ = 0L;
        onChanged();
        return this;
      }

      // optional bool OBSOLETE_noreply = 4 [default = false];
      private boolean oBSOLETENoreply_ ;
      /**
       * <code>optional bool OBSOLETE_noreply = 4 [default = false];</code>
       *
       * <pre>
       * This flag is ignored on the server.  `noreply` should be added
       * to `global_optargs` instead (the key "noreply" should map to
       * either true or false).
       * </pre>
       */
      public boolean hasOBSOLETENoreply() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool OBSOLETE_noreply = 4 [default = false];</code>
       *
       * <pre>
       * This flag is ignored on the server.  `noreply` should be added
       * to `global_optargs` instead (the key "noreply" should map to
       * either true or false).
       * </pre>
       */
      public boolean getOBSOLETENoreply() {
        return oBSOLETENoreply_;
      }
      /**
       * <code>optional bool OBSOLETE_noreply = 4 [default = false];</code>
       *
       * <pre>
       * This flag is ignored on the server.  `noreply` should be added
       * to `global_optargs` instead (the key "noreply" should map to
       * either true or false).
       * </pre>
       */
      public Builder setOBSOLETENoreply(boolean value) {
        bitField0_ |= 0x00000008;
        oBSOLETENoreply_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool OBSOLETE_noreply = 4 [default = false];</code>
       *
       * <pre>
       * This flag is ignored on the server.  `noreply` should be added
       * to `global_optargs` instead (the key "noreply" should map to
       * either true or false).
       * </pre>
       */
      public Builder clearOBSOLETENoreply() {
        bitField0_ = (bitField0_ & ~0x00000008);
        oBSOLETENoreply_ = false;
        onChanged();
        return this;
      }

      // repeated .Query.AssocPair global_optargs = 6;
      private java.util.List<com.rethinkdb.QL2.Query.AssocPair> globalOptargs_ =
        java.util.Collections.emptyList();
      private void ensureGlobalOptargsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          globalOptargs_ = new java.util.ArrayList<com.rethinkdb.QL2.Query.AssocPair>(globalOptargs_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.rethinkdb.QL2.Query.AssocPair, com.rethinkdb.QL2.Query.AssocPair.Builder, com.rethinkdb.QL2.Query.AssocPairOrBuilder> globalOptargsBuilder_;

      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public java.util.List<com.rethinkdb.QL2.Query.AssocPair> getGlobalOptargsList() {
        if (globalOptargsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(globalOptargs_);
        } else {
          return globalOptargsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public int getGlobalOptargsCount() {
        if (globalOptargsBuilder_ == null) {
          return globalOptargs_.size();
        } else {
          return globalOptargsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public com.rethinkdb.QL2.Query.AssocPair getGlobalOptargs(int index) {
        if (globalOptargsBuilder_ == null) {
          return globalOptargs_.get(index);
        } else {
          return globalOptargsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public Builder setGlobalOptargs(
          int index, com.rethinkdb.QL2.Query.AssocPair value) {
        if (globalOptargsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGlobalOptargsIsMutable();
          globalOptargs_.set(index, value);
          onChanged();
        } else {
          globalOptargsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public Builder setGlobalOptargs(
          int index, com.rethinkdb.QL2.Query.AssocPair.Builder builderForValue) {
        if (globalOptargsBuilder_ == null) {
          ensureGlobalOptargsIsMutable();
          globalOptargs_.set(index, builderForValue.build());
          onChanged();
        } else {
          globalOptargsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public Builder addGlobalOptargs(com.rethinkdb.QL2.Query.AssocPair value) {
        if (globalOptargsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGlobalOptargsIsMutable();
          globalOptargs_.add(value);
          onChanged();
        } else {
          globalOptargsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public Builder addGlobalOptargs(
          int index, com.rethinkdb.QL2.Query.AssocPair value) {
        if (globalOptargsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGlobalOptargsIsMutable();
          globalOptargs_.add(index, value);
          onChanged();
        } else {
          globalOptargsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public Builder addGlobalOptargs(
          com.rethinkdb.QL2.Query.AssocPair.Builder builderForValue) {
        if (globalOptargsBuilder_ == null) {
          ensureGlobalOptargsIsMutable();
          globalOptargs_.add(builderForValue.build());
          onChanged();
        } else {
          globalOptargsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public Builder addGlobalOptargs(
          int index, com.rethinkdb.QL2.Query.AssocPair.Builder builderForValue) {
        if (globalOptargsBuilder_ == null) {
          ensureGlobalOptargsIsMutable();
          globalOptargs_.add(index, builderForValue.build());
          onChanged();
        } else {
          globalOptargsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public Builder addAllGlobalOptargs(
          java.lang.Iterable<? extends com.rethinkdb.QL2.Query.AssocPair> values) {
        if (globalOptargsBuilder_ == null) {
          ensureGlobalOptargsIsMutable();
          super.addAll(values, globalOptargs_);
          onChanged();
        } else {
          globalOptargsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public Builder clearGlobalOptargs() {
        if (globalOptargsBuilder_ == null) {
          globalOptargs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          globalOptargsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public Builder removeGlobalOptargs(int index) {
        if (globalOptargsBuilder_ == null) {
          ensureGlobalOptargsIsMutable();
          globalOptargs_.remove(index);
          onChanged();
        } else {
          globalOptargsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public com.rethinkdb.QL2.Query.AssocPair.Builder getGlobalOptargsBuilder(
          int index) {
        return getGlobalOptargsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public com.rethinkdb.QL2.Query.AssocPairOrBuilder getGlobalOptargsOrBuilder(
          int index) {
        if (globalOptargsBuilder_ == null) {
          return globalOptargs_.get(index);  } else {
          return globalOptargsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public java.util.List<? extends com.rethinkdb.QL2.Query.AssocPairOrBuilder> 
           getGlobalOptargsOrBuilderList() {
        if (globalOptargsBuilder_ != null) {
          return globalOptargsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(globalOptargs_);
        }
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public com.rethinkdb.QL2.Query.AssocPair.Builder addGlobalOptargsBuilder() {
        return getGlobalOptargsFieldBuilder().addBuilder(
            com.rethinkdb.QL2.Query.AssocPair.getDefaultInstance());
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public com.rethinkdb.QL2.Query.AssocPair.Builder addGlobalOptargsBuilder(
          int index) {
        return getGlobalOptargsFieldBuilder().addBuilder(
            index, com.rethinkdb.QL2.Query.AssocPair.getDefaultInstance());
      }
      /**
       * <code>repeated .Query.AssocPair global_optargs = 6;</code>
       */
      public java.util.List<com.rethinkdb.QL2.Query.AssocPair.Builder> 
           getGlobalOptargsBuilderList() {
        return getGlobalOptargsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.rethinkdb.QL2.Query.AssocPair, com.rethinkdb.QL2.Query.AssocPair.Builder, com.rethinkdb.QL2.Query.AssocPairOrBuilder> 
          getGlobalOptargsFieldBuilder() {
        if (globalOptargsBuilder_ == null) {
          globalOptargsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.rethinkdb.QL2.Query.AssocPair, com.rethinkdb.QL2.Query.AssocPair.Builder, com.rethinkdb.QL2.Query.AssocPairOrBuilder>(
                  globalOptargs_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          globalOptargs_ = null;
        }
        return globalOptargsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:Query)
    }

    static {
      defaultInstance = new Query(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Query)
  }

  public interface FrameOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .Frame.FrameType type = 1;
    /**
     * <code>optional .Frame.FrameType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional .Frame.FrameType type = 1;</code>
     */
    com.rethinkdb.QL2.Frame.FrameType getType();

    // optional int64 pos = 2;
    /**
     * <code>optional int64 pos = 2;</code>
     *
     * <pre>
     * The index of the positional argument.
     * </pre>
     */
    boolean hasPos();
    /**
     * <code>optional int64 pos = 2;</code>
     *
     * <pre>
     * The index of the positional argument.
     * </pre>
     */
    long getPos();

    // optional string opt = 3;
    /**
     * <code>optional string opt = 3;</code>
     *
     * <pre>
     * The name of the optional argument.
     * </pre>
     */
    boolean hasOpt();
    /**
     * <code>optional string opt = 3;</code>
     *
     * <pre>
     * The name of the optional argument.
     * </pre>
     */
    java.lang.String getOpt();
    /**
     * <code>optional string opt = 3;</code>
     *
     * <pre>
     * The name of the optional argument.
     * </pre>
     */
    com.google.protobuf.ByteString
        getOptBytes();
  }
  /**
   * Protobuf type {@code Frame}
   *
   * <pre>
   * A backtrace frame (see `backtrace` in Response below)
   * </pre>
   */
  public static final class Frame extends
      com.google.protobuf.GeneratedMessage
      implements FrameOrBuilder {
    // Use Frame.newBuilder() to construct.
    private Frame(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Frame(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Frame defaultInstance;
    public static Frame getDefaultInstance() {
      return defaultInstance;
    }

    public Frame getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Frame(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.rethinkdb.QL2.Frame.FrameType value = com.rethinkdb.QL2.Frame.FrameType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              pos_ = input.readInt64();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              opt_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.rethinkdb.QL2.internal_static_Frame_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.rethinkdb.QL2.internal_static_Frame_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.rethinkdb.QL2.Frame.class, com.rethinkdb.QL2.Frame.Builder.class);
    }

    public static com.google.protobuf.Parser<Frame> PARSER =
        new com.google.protobuf.AbstractParser<Frame>() {
      public Frame parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Frame(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Frame> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code Frame.FrameType}
     */
    public enum FrameType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>POS = 1;</code>
       *
       * <pre>
       * Error occured in a positional argument.
       * </pre>
       */
      POS(0, 1),
      /**
       * <code>OPT = 2;</code>
       *
       * <pre>
       * Error occured in an optional argument.
       * </pre>
       */
      OPT(1, 2),
      ;

      /**
       * <code>POS = 1;</code>
       *
       * <pre>
       * Error occured in a positional argument.
       * </pre>
       */
      public static final int POS_VALUE = 1;
      /**
       * <code>OPT = 2;</code>
       *
       * <pre>
       * Error occured in an optional argument.
       * </pre>
       */
      public static final int OPT_VALUE = 2;


      public final int getNumber() { return value; }

      public static FrameType valueOf(int value) {
        switch (value) {
          case 1: return POS;
          case 2: return OPT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FrameType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<FrameType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FrameType>() {
              public FrameType findValueByNumber(int number) {
                return FrameType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.rethinkdb.QL2.Frame.getDescriptor().getEnumTypes().get(0);
      }

      private static final FrameType[] VALUES = values();

      public static FrameType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private FrameType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:Frame.FrameType)
    }

    private int bitField0_;
    // optional .Frame.FrameType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private com.rethinkdb.QL2.Frame.FrameType type_;
    /**
     * <code>optional .Frame.FrameType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .Frame.FrameType type = 1;</code>
     */
    public com.rethinkdb.QL2.Frame.FrameType getType() {
      return type_;
    }

    // optional int64 pos = 2;
    public static final int POS_FIELD_NUMBER = 2;
    private long pos_;
    /**
     * <code>optional int64 pos = 2;</code>
     *
     * <pre>
     * The index of the positional argument.
     * </pre>
     */
    public boolean hasPos() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 pos = 2;</code>
     *
     * <pre>
     * The index of the positional argument.
     * </pre>
     */
    public long getPos() {
      return pos_;
    }

    // optional string opt = 3;
    public static final int OPT_FIELD_NUMBER = 3;
    private java.lang.Object opt_;
    /**
     * <code>optional string opt = 3;</code>
     *
     * <pre>
     * The name of the optional argument.
     * </pre>
     */
    public boolean hasOpt() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string opt = 3;</code>
     *
     * <pre>
     * The name of the optional argument.
     * </pre>
     */
    public java.lang.String getOpt() {
      java.lang.Object ref = opt_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          opt_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string opt = 3;</code>
     *
     * <pre>
     * The name of the optional argument.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getOptBytes() {
      java.lang.Object ref = opt_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        opt_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      type_ = com.rethinkdb.QL2.Frame.FrameType.POS;
      pos_ = 0L;
      opt_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, pos_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getOptBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, pos_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getOptBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.rethinkdb.QL2.Frame parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.rethinkdb.QL2.Frame parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Frame parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.rethinkdb.QL2.Frame parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Frame parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.rethinkdb.QL2.Frame parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Frame parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.rethinkdb.QL2.Frame parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Frame parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.rethinkdb.QL2.Frame parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.rethinkdb.QL2.Frame prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Frame}
     *
     * <pre>
     * A backtrace frame (see `backtrace` in Response below)
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.rethinkdb.QL2.FrameOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.rethinkdb.QL2.internal_static_Frame_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.rethinkdb.QL2.internal_static_Frame_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.rethinkdb.QL2.Frame.class, com.rethinkdb.QL2.Frame.Builder.class);
      }

      // Construct using com.rethinkdb.QL2.Frame.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = com.rethinkdb.QL2.Frame.FrameType.POS;
        bitField0_ = (bitField0_ & ~0x00000001);
        pos_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        opt_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.rethinkdb.QL2.internal_static_Frame_descriptor;
      }

      public com.rethinkdb.QL2.Frame getDefaultInstanceForType() {
        return com.rethinkdb.QL2.Frame.getDefaultInstance();
      }

      public com.rethinkdb.QL2.Frame build() {
        com.rethinkdb.QL2.Frame result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.rethinkdb.QL2.Frame buildPartial() {
        com.rethinkdb.QL2.Frame result = new com.rethinkdb.QL2.Frame(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.pos_ = pos_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.opt_ = opt_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.rethinkdb.QL2.Frame) {
          return mergeFrom((com.rethinkdb.QL2.Frame)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.rethinkdb.QL2.Frame other) {
        if (other == com.rethinkdb.QL2.Frame.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasPos()) {
          setPos(other.getPos());
        }
        if (other.hasOpt()) {
          bitField0_ |= 0x00000004;
          opt_ = other.opt_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.rethinkdb.QL2.Frame parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.rethinkdb.QL2.Frame) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .Frame.FrameType type = 1;
      private com.rethinkdb.QL2.Frame.FrameType type_ = com.rethinkdb.QL2.Frame.FrameType.POS;
      /**
       * <code>optional .Frame.FrameType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .Frame.FrameType type = 1;</code>
       */
      public com.rethinkdb.QL2.Frame.FrameType getType() {
        return type_;
      }
      /**
       * <code>optional .Frame.FrameType type = 1;</code>
       */
      public Builder setType(com.rethinkdb.QL2.Frame.FrameType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .Frame.FrameType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.rethinkdb.QL2.Frame.FrameType.POS;
        onChanged();
        return this;
      }

      // optional int64 pos = 2;
      private long pos_ ;
      /**
       * <code>optional int64 pos = 2;</code>
       *
       * <pre>
       * The index of the positional argument.
       * </pre>
       */
      public boolean hasPos() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 pos = 2;</code>
       *
       * <pre>
       * The index of the positional argument.
       * </pre>
       */
      public long getPos() {
        return pos_;
      }
      /**
       * <code>optional int64 pos = 2;</code>
       *
       * <pre>
       * The index of the positional argument.
       * </pre>
       */
      public Builder setPos(long value) {
        bitField0_ |= 0x00000002;
        pos_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 pos = 2;</code>
       *
       * <pre>
       * The index of the positional argument.
       * </pre>
       */
      public Builder clearPos() {
        bitField0_ = (bitField0_ & ~0x00000002);
        pos_ = 0L;
        onChanged();
        return this;
      }

      // optional string opt = 3;
      private java.lang.Object opt_ = "";
      /**
       * <code>optional string opt = 3;</code>
       *
       * <pre>
       * The name of the optional argument.
       * </pre>
       */
      public boolean hasOpt() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string opt = 3;</code>
       *
       * <pre>
       * The name of the optional argument.
       * </pre>
       */
      public java.lang.String getOpt() {
        java.lang.Object ref = opt_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          opt_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string opt = 3;</code>
       *
       * <pre>
       * The name of the optional argument.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getOptBytes() {
        java.lang.Object ref = opt_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          opt_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string opt = 3;</code>
       *
       * <pre>
       * The name of the optional argument.
       * </pre>
       */
      public Builder setOpt(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        opt_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string opt = 3;</code>
       *
       * <pre>
       * The name of the optional argument.
       * </pre>
       */
      public Builder clearOpt() {
        bitField0_ = (bitField0_ & ~0x00000004);
        opt_ = getDefaultInstance().getOpt();
        onChanged();
        return this;
      }
      /**
       * <code>optional string opt = 3;</code>
       *
       * <pre>
       * The name of the optional argument.
       * </pre>
       */
      public Builder setOptBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        opt_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Frame)
    }

    static {
      defaultInstance = new Frame(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Frame)
  }

  public interface BacktraceOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .Frame frames = 1;
    /**
     * <code>repeated .Frame frames = 1;</code>
     */
    java.util.List<com.rethinkdb.QL2.Frame> 
        getFramesList();
    /**
     * <code>repeated .Frame frames = 1;</code>
     */
    com.rethinkdb.QL2.Frame getFrames(int index);
    /**
     * <code>repeated .Frame frames = 1;</code>
     */
    int getFramesCount();
    /**
     * <code>repeated .Frame frames = 1;</code>
     */
    java.util.List<? extends com.rethinkdb.QL2.FrameOrBuilder> 
        getFramesOrBuilderList();
    /**
     * <code>repeated .Frame frames = 1;</code>
     */
    com.rethinkdb.QL2.FrameOrBuilder getFramesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code Backtrace}
   */
  public static final class Backtrace extends
      com.google.protobuf.GeneratedMessage
      implements BacktraceOrBuilder {
    // Use Backtrace.newBuilder() to construct.
    private Backtrace(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Backtrace(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Backtrace defaultInstance;
    public static Backtrace getDefaultInstance() {
      return defaultInstance;
    }

    public Backtrace getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Backtrace(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                frames_ = new java.util.ArrayList<com.rethinkdb.QL2.Frame>();
                mutable_bitField0_ |= 0x00000001;
              }
              frames_.add(input.readMessage(com.rethinkdb.QL2.Frame.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          frames_ = java.util.Collections.unmodifiableList(frames_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.rethinkdb.QL2.internal_static_Backtrace_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.rethinkdb.QL2.internal_static_Backtrace_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.rethinkdb.QL2.Backtrace.class, com.rethinkdb.QL2.Backtrace.Builder.class);
    }

    public static com.google.protobuf.Parser<Backtrace> PARSER =
        new com.google.protobuf.AbstractParser<Backtrace>() {
      public Backtrace parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Backtrace(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Backtrace> getParserForType() {
      return PARSER;
    }

    // repeated .Frame frames = 1;
    public static final int FRAMES_FIELD_NUMBER = 1;
    private java.util.List<com.rethinkdb.QL2.Frame> frames_;
    /**
     * <code>repeated .Frame frames = 1;</code>
     */
    public java.util.List<com.rethinkdb.QL2.Frame> getFramesList() {
      return frames_;
    }
    /**
     * <code>repeated .Frame frames = 1;</code>
     */
    public java.util.List<? extends com.rethinkdb.QL2.FrameOrBuilder> 
        getFramesOrBuilderList() {
      return frames_;
    }
    /**
     * <code>repeated .Frame frames = 1;</code>
     */
    public int getFramesCount() {
      return frames_.size();
    }
    /**
     * <code>repeated .Frame frames = 1;</code>
     */
    public com.rethinkdb.QL2.Frame getFrames(int index) {
      return frames_.get(index);
    }
    /**
     * <code>repeated .Frame frames = 1;</code>
     */
    public com.rethinkdb.QL2.FrameOrBuilder getFramesOrBuilder(
        int index) {
      return frames_.get(index);
    }

    private void initFields() {
      frames_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < frames_.size(); i++) {
        output.writeMessage(1, frames_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < frames_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, frames_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.rethinkdb.QL2.Backtrace parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.rethinkdb.QL2.Backtrace parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Backtrace parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.rethinkdb.QL2.Backtrace parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Backtrace parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.rethinkdb.QL2.Backtrace parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Backtrace parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.rethinkdb.QL2.Backtrace parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Backtrace parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.rethinkdb.QL2.Backtrace parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.rethinkdb.QL2.Backtrace prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Backtrace}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.rethinkdb.QL2.BacktraceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.rethinkdb.QL2.internal_static_Backtrace_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.rethinkdb.QL2.internal_static_Backtrace_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.rethinkdb.QL2.Backtrace.class, com.rethinkdb.QL2.Backtrace.Builder.class);
      }

      // Construct using com.rethinkdb.QL2.Backtrace.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFramesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (framesBuilder_ == null) {
          frames_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          framesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.rethinkdb.QL2.internal_static_Backtrace_descriptor;
      }

      public com.rethinkdb.QL2.Backtrace getDefaultInstanceForType() {
        return com.rethinkdb.QL2.Backtrace.getDefaultInstance();
      }

      public com.rethinkdb.QL2.Backtrace build() {
        com.rethinkdb.QL2.Backtrace result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.rethinkdb.QL2.Backtrace buildPartial() {
        com.rethinkdb.QL2.Backtrace result = new com.rethinkdb.QL2.Backtrace(this);
        int from_bitField0_ = bitField0_;
        if (framesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            frames_ = java.util.Collections.unmodifiableList(frames_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.frames_ = frames_;
        } else {
          result.frames_ = framesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.rethinkdb.QL2.Backtrace) {
          return mergeFrom((com.rethinkdb.QL2.Backtrace)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.rethinkdb.QL2.Backtrace other) {
        if (other == com.rethinkdb.QL2.Backtrace.getDefaultInstance()) return this;
        if (framesBuilder_ == null) {
          if (!other.frames_.isEmpty()) {
            if (frames_.isEmpty()) {
              frames_ = other.frames_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFramesIsMutable();
              frames_.addAll(other.frames_);
            }
            onChanged();
          }
        } else {
          if (!other.frames_.isEmpty()) {
            if (framesBuilder_.isEmpty()) {
              framesBuilder_.dispose();
              framesBuilder_ = null;
              frames_ = other.frames_;
              bitField0_ = (bitField0_ & ~0x00000001);
              framesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFramesFieldBuilder() : null;
            } else {
              framesBuilder_.addAllMessages(other.frames_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.rethinkdb.QL2.Backtrace parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.rethinkdb.QL2.Backtrace) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .Frame frames = 1;
      private java.util.List<com.rethinkdb.QL2.Frame> frames_ =
        java.util.Collections.emptyList();
      private void ensureFramesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          frames_ = new java.util.ArrayList<com.rethinkdb.QL2.Frame>(frames_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.rethinkdb.QL2.Frame, com.rethinkdb.QL2.Frame.Builder, com.rethinkdb.QL2.FrameOrBuilder> framesBuilder_;

      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public java.util.List<com.rethinkdb.QL2.Frame> getFramesList() {
        if (framesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(frames_);
        } else {
          return framesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public int getFramesCount() {
        if (framesBuilder_ == null) {
          return frames_.size();
        } else {
          return framesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public com.rethinkdb.QL2.Frame getFrames(int index) {
        if (framesBuilder_ == null) {
          return frames_.get(index);
        } else {
          return framesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public Builder setFrames(
          int index, com.rethinkdb.QL2.Frame value) {
        if (framesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFramesIsMutable();
          frames_.set(index, value);
          onChanged();
        } else {
          framesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public Builder setFrames(
          int index, com.rethinkdb.QL2.Frame.Builder builderForValue) {
        if (framesBuilder_ == null) {
          ensureFramesIsMutable();
          frames_.set(index, builderForValue.build());
          onChanged();
        } else {
          framesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public Builder addFrames(com.rethinkdb.QL2.Frame value) {
        if (framesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFramesIsMutable();
          frames_.add(value);
          onChanged();
        } else {
          framesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public Builder addFrames(
          int index, com.rethinkdb.QL2.Frame value) {
        if (framesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFramesIsMutable();
          frames_.add(index, value);
          onChanged();
        } else {
          framesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public Builder addFrames(
          com.rethinkdb.QL2.Frame.Builder builderForValue) {
        if (framesBuilder_ == null) {
          ensureFramesIsMutable();
          frames_.add(builderForValue.build());
          onChanged();
        } else {
          framesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public Builder addFrames(
          int index, com.rethinkdb.QL2.Frame.Builder builderForValue) {
        if (framesBuilder_ == null) {
          ensureFramesIsMutable();
          frames_.add(index, builderForValue.build());
          onChanged();
        } else {
          framesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public Builder addAllFrames(
          java.lang.Iterable<? extends com.rethinkdb.QL2.Frame> values) {
        if (framesBuilder_ == null) {
          ensureFramesIsMutable();
          super.addAll(values, frames_);
          onChanged();
        } else {
          framesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public Builder clearFrames() {
        if (framesBuilder_ == null) {
          frames_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          framesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public Builder removeFrames(int index) {
        if (framesBuilder_ == null) {
          ensureFramesIsMutable();
          frames_.remove(index);
          onChanged();
        } else {
          framesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public com.rethinkdb.QL2.Frame.Builder getFramesBuilder(
          int index) {
        return getFramesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public com.rethinkdb.QL2.FrameOrBuilder getFramesOrBuilder(
          int index) {
        if (framesBuilder_ == null) {
          return frames_.get(index);  } else {
          return framesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public java.util.List<? extends com.rethinkdb.QL2.FrameOrBuilder> 
           getFramesOrBuilderList() {
        if (framesBuilder_ != null) {
          return framesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(frames_);
        }
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public com.rethinkdb.QL2.Frame.Builder addFramesBuilder() {
        return getFramesFieldBuilder().addBuilder(
            com.rethinkdb.QL2.Frame.getDefaultInstance());
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public com.rethinkdb.QL2.Frame.Builder addFramesBuilder(
          int index) {
        return getFramesFieldBuilder().addBuilder(
            index, com.rethinkdb.QL2.Frame.getDefaultInstance());
      }
      /**
       * <code>repeated .Frame frames = 1;</code>
       */
      public java.util.List<com.rethinkdb.QL2.Frame.Builder> 
           getFramesBuilderList() {
        return getFramesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.rethinkdb.QL2.Frame, com.rethinkdb.QL2.Frame.Builder, com.rethinkdb.QL2.FrameOrBuilder> 
          getFramesFieldBuilder() {
        if (framesBuilder_ == null) {
          framesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.rethinkdb.QL2.Frame, com.rethinkdb.QL2.Frame.Builder, com.rethinkdb.QL2.FrameOrBuilder>(
                  frames_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          frames_ = null;
        }
        return framesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:Backtrace)
    }

    static {
      defaultInstance = new Backtrace(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Backtrace)
  }

  public interface ResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .Response.ResponseType type = 1;
    /**
     * <code>optional .Response.ResponseType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional .Response.ResponseType type = 1;</code>
     */
    com.rethinkdb.QL2.Response.ResponseType getType();

    // optional int64 token = 2;
    /**
     * <code>optional int64 token = 2;</code>
     *
     * <pre>
     * Indicates what [Query] this response corresponds to.
     * </pre>
     */
    boolean hasToken();
    /**
     * <code>optional int64 token = 2;</code>
     *
     * <pre>
     * Indicates what [Query] this response corresponds to.
     * </pre>
     */
    long getToken();

    // repeated .Datum response = 3;
    /**
     * <code>repeated .Datum response = 3;</code>
     *
     * <pre>
     * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
     * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
     * error message (of type [R_STR]) in all other cases.
     * </pre>
     */
    java.util.List<com.rethinkdb.QL2.Datum> 
        getResponseList();
    /**
     * <code>repeated .Datum response = 3;</code>
     *
     * <pre>
     * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
     * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
     * error message (of type [R_STR]) in all other cases.
     * </pre>
     */
    com.rethinkdb.QL2.Datum getResponse(int index);
    /**
     * <code>repeated .Datum response = 3;</code>
     *
     * <pre>
     * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
     * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
     * error message (of type [R_STR]) in all other cases.
     * </pre>
     */
    int getResponseCount();
    /**
     * <code>repeated .Datum response = 3;</code>
     *
     * <pre>
     * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
     * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
     * error message (of type [R_STR]) in all other cases.
     * </pre>
     */
    java.util.List<? extends com.rethinkdb.QL2.DatumOrBuilder> 
        getResponseOrBuilderList();
    /**
     * <code>repeated .Datum response = 3;</code>
     *
     * <pre>
     * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
     * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
     * error message (of type [R_STR]) in all other cases.
     * </pre>
     */
    com.rethinkdb.QL2.DatumOrBuilder getResponseOrBuilder(
        int index);

    // optional .Backtrace backtrace = 4;
    /**
     * <code>optional .Backtrace backtrace = 4;</code>
     *
     * <pre>
     * Contains n [Frame]s when you get back an error.
     * </pre>
     */
    boolean hasBacktrace();
    /**
     * <code>optional .Backtrace backtrace = 4;</code>
     *
     * <pre>
     * Contains n [Frame]s when you get back an error.
     * </pre>
     */
    com.rethinkdb.QL2.Backtrace getBacktrace();
    /**
     * <code>optional .Backtrace backtrace = 4;</code>
     *
     * <pre>
     * Contains n [Frame]s when you get back an error.
     * </pre>
     */
    com.rethinkdb.QL2.BacktraceOrBuilder getBacktraceOrBuilder();
  }
  /**
   * Protobuf type {@code Response}
   *
   * <pre>
   * You get back a response with the same [token] as your query.
   * </pre>
   */
  public static final class Response extends
      com.google.protobuf.GeneratedMessage
      implements ResponseOrBuilder {
    // Use Response.newBuilder() to construct.
    private Response(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Response(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Response defaultInstance;
    public static Response getDefaultInstance() {
      return defaultInstance;
    }

    public Response getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.rethinkdb.QL2.Response.ResponseType value = com.rethinkdb.QL2.Response.ResponseType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              token_ = input.readInt64();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                response_ = new java.util.ArrayList<com.rethinkdb.QL2.Datum>();
                mutable_bitField0_ |= 0x00000004;
              }
              response_.add(input.readMessage(com.rethinkdb.QL2.Datum.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              com.rethinkdb.QL2.Backtrace.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = backtrace_.toBuilder();
              }
              backtrace_ = input.readMessage(com.rethinkdb.QL2.Backtrace.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(backtrace_);
                backtrace_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          response_ = java.util.Collections.unmodifiableList(response_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.rethinkdb.QL2.internal_static_Response_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.rethinkdb.QL2.internal_static_Response_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.rethinkdb.QL2.Response.class, com.rethinkdb.QL2.Response.Builder.class);
    }

    public static com.google.protobuf.Parser<Response> PARSER =
        new com.google.protobuf.AbstractParser<Response>() {
      public Response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Response(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Response> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code Response.ResponseType}
     */
    public enum ResponseType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SUCCESS_ATOM = 1;</code>
       *
       * <pre>
       * These response types indicate success.
       * </pre>
       */
      SUCCESS_ATOM(0, 1),
      /**
       * <code>SUCCESS_SEQUENCE = 2;</code>
       *
       * <pre>
       * Query returned a sequence of RQL datatypes.
       * </pre>
       */
      SUCCESS_SEQUENCE(1, 2),
      /**
       * <code>SUCCESS_PARTIAL = 3;</code>
       *
       * <pre>
       * Query returned a partial sequence of RQL
       * </pre>
       */
      SUCCESS_PARTIAL(2, 3),
      /**
       * <code>CLIENT_ERROR = 16;</code>
       *
       * <pre>
       * These response types indicate failure.
       * </pre>
       */
      CLIENT_ERROR(3, 16),
      /**
       * <code>COMPILE_ERROR = 17;</code>
       *
       * <pre>
       * client sends a malformed protobuf, or tries to
       * send [CONTINUE] for an unknown token.
       * </pre>
       */
      COMPILE_ERROR(4, 17),
      /**
       * <code>RUNTIME_ERROR = 18;</code>
       *
       * <pre>
       * checking.  For example, if you pass too many
       * arguments to a function.
       * </pre>
       */
      RUNTIME_ERROR(5, 18),
      ;

      /**
       * <code>SUCCESS_ATOM = 1;</code>
       *
       * <pre>
       * These response types indicate success.
       * </pre>
       */
      public static final int SUCCESS_ATOM_VALUE = 1;
      /**
       * <code>SUCCESS_SEQUENCE = 2;</code>
       *
       * <pre>
       * Query returned a sequence of RQL datatypes.
       * </pre>
       */
      public static final int SUCCESS_SEQUENCE_VALUE = 2;
      /**
       * <code>SUCCESS_PARTIAL = 3;</code>
       *
       * <pre>
       * Query returned a partial sequence of RQL
       * </pre>
       */
      public static final int SUCCESS_PARTIAL_VALUE = 3;
      /**
       * <code>CLIENT_ERROR = 16;</code>
       *
       * <pre>
       * These response types indicate failure.
       * </pre>
       */
      public static final int CLIENT_ERROR_VALUE = 16;
      /**
       * <code>COMPILE_ERROR = 17;</code>
       *
       * <pre>
       * client sends a malformed protobuf, or tries to
       * send [CONTINUE] for an unknown token.
       * </pre>
       */
      public static final int COMPILE_ERROR_VALUE = 17;
      /**
       * <code>RUNTIME_ERROR = 18;</code>
       *
       * <pre>
       * checking.  For example, if you pass too many
       * arguments to a function.
       * </pre>
       */
      public static final int RUNTIME_ERROR_VALUE = 18;


      public final int getNumber() { return value; }

      public static ResponseType valueOf(int value) {
        switch (value) {
          case 1: return SUCCESS_ATOM;
          case 2: return SUCCESS_SEQUENCE;
          case 3: return SUCCESS_PARTIAL;
          case 16: return CLIENT_ERROR;
          case 17: return COMPILE_ERROR;
          case 18: return RUNTIME_ERROR;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ResponseType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ResponseType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ResponseType>() {
              public ResponseType findValueByNumber(int number) {
                return ResponseType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.rethinkdb.QL2.Response.getDescriptor().getEnumTypes().get(0);
      }

      private static final ResponseType[] VALUES = values();

      public static ResponseType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ResponseType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:Response.ResponseType)
    }

    private int bitField0_;
    // optional .Response.ResponseType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private com.rethinkdb.QL2.Response.ResponseType type_;
    /**
     * <code>optional .Response.ResponseType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .Response.ResponseType type = 1;</code>
     */
    public com.rethinkdb.QL2.Response.ResponseType getType() {
      return type_;
    }

    // optional int64 token = 2;
    public static final int TOKEN_FIELD_NUMBER = 2;
    private long token_;
    /**
     * <code>optional int64 token = 2;</code>
     *
     * <pre>
     * Indicates what [Query] this response corresponds to.
     * </pre>
     */
    public boolean hasToken() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 token = 2;</code>
     *
     * <pre>
     * Indicates what [Query] this response corresponds to.
     * </pre>
     */
    public long getToken() {
      return token_;
    }

    // repeated .Datum response = 3;
    public static final int RESPONSE_FIELD_NUMBER = 3;
    private java.util.List<com.rethinkdb.QL2.Datum> response_;
    /**
     * <code>repeated .Datum response = 3;</code>
     *
     * <pre>
     * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
     * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
     * error message (of type [R_STR]) in all other cases.
     * </pre>
     */
    public java.util.List<com.rethinkdb.QL2.Datum> getResponseList() {
      return response_;
    }
    /**
     * <code>repeated .Datum response = 3;</code>
     *
     * <pre>
     * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
     * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
     * error message (of type [R_STR]) in all other cases.
     * </pre>
     */
    public java.util.List<? extends com.rethinkdb.QL2.DatumOrBuilder> 
        getResponseOrBuilderList() {
      return response_;
    }
    /**
     * <code>repeated .Datum response = 3;</code>
     *
     * <pre>
     * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
     * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
     * error message (of type [R_STR]) in all other cases.
     * </pre>
     */
    public int getResponseCount() {
      return response_.size();
    }
    /**
     * <code>repeated .Datum response = 3;</code>
     *
     * <pre>
     * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
     * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
     * error message (of type [R_STR]) in all other cases.
     * </pre>
     */
    public com.rethinkdb.QL2.Datum getResponse(int index) {
      return response_.get(index);
    }
    /**
     * <code>repeated .Datum response = 3;</code>
     *
     * <pre>
     * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
     * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
     * error message (of type [R_STR]) in all other cases.
     * </pre>
     */
    public com.rethinkdb.QL2.DatumOrBuilder getResponseOrBuilder(
        int index) {
      return response_.get(index);
    }

    // optional .Backtrace backtrace = 4;
    public static final int BACKTRACE_FIELD_NUMBER = 4;
    private com.rethinkdb.QL2.Backtrace backtrace_;
    /**
     * <code>optional .Backtrace backtrace = 4;</code>
     *
     * <pre>
     * Contains n [Frame]s when you get back an error.
     * </pre>
     */
    public boolean hasBacktrace() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .Backtrace backtrace = 4;</code>
     *
     * <pre>
     * Contains n [Frame]s when you get back an error.
     * </pre>
     */
    public com.rethinkdb.QL2.Backtrace getBacktrace() {
      return backtrace_;
    }
    /**
     * <code>optional .Backtrace backtrace = 4;</code>
     *
     * <pre>
     * Contains n [Frame]s when you get back an error.
     * </pre>
     */
    public com.rethinkdb.QL2.BacktraceOrBuilder getBacktraceOrBuilder() {
      return backtrace_;
    }

    private void initFields() {
      type_ = com.rethinkdb.QL2.Response.ResponseType.SUCCESS_ATOM;
      token_ = 0L;
      response_ = java.util.Collections.emptyList();
      backtrace_ = com.rethinkdb.QL2.Backtrace.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getResponseCount(); i++) {
        if (!getResponse(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, token_);
      }
      for (int i = 0; i < response_.size(); i++) {
        output.writeMessage(3, response_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(4, backtrace_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, token_);
      }
      for (int i = 0; i < response_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, response_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, backtrace_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.rethinkdb.QL2.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.rethinkdb.QL2.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.rethinkdb.QL2.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.rethinkdb.QL2.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.rethinkdb.QL2.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.rethinkdb.QL2.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.rethinkdb.QL2.Response prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Response}
     *
     * <pre>
     * You get back a response with the same [token] as your query.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.rethinkdb.QL2.ResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.rethinkdb.QL2.internal_static_Response_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.rethinkdb.QL2.internal_static_Response_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.rethinkdb.QL2.Response.class, com.rethinkdb.QL2.Response.Builder.class);
      }

      // Construct using com.rethinkdb.QL2.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getResponseFieldBuilder();
          getBacktraceFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = com.rethinkdb.QL2.Response.ResponseType.SUCCESS_ATOM;
        bitField0_ = (bitField0_ & ~0x00000001);
        token_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (responseBuilder_ == null) {
          response_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          responseBuilder_.clear();
        }
        if (backtraceBuilder_ == null) {
          backtrace_ = com.rethinkdb.QL2.Backtrace.getDefaultInstance();
        } else {
          backtraceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.rethinkdb.QL2.internal_static_Response_descriptor;
      }

      public com.rethinkdb.QL2.Response getDefaultInstanceForType() {
        return com.rethinkdb.QL2.Response.getDefaultInstance();
      }

      public com.rethinkdb.QL2.Response build() {
        com.rethinkdb.QL2.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.rethinkdb.QL2.Response buildPartial() {
        com.rethinkdb.QL2.Response result = new com.rethinkdb.QL2.Response(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.token_ = token_;
        if (responseBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            response_ = java.util.Collections.unmodifiableList(response_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.response_ = response_;
        } else {
          result.response_ = responseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        if (backtraceBuilder_ == null) {
          result.backtrace_ = backtrace_;
        } else {
          result.backtrace_ = backtraceBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.rethinkdb.QL2.Response) {
          return mergeFrom((com.rethinkdb.QL2.Response)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.rethinkdb.QL2.Response other) {
        if (other == com.rethinkdb.QL2.Response.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasToken()) {
          setToken(other.getToken());
        }
        if (responseBuilder_ == null) {
          if (!other.response_.isEmpty()) {
            if (response_.isEmpty()) {
              response_ = other.response_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureResponseIsMutable();
              response_.addAll(other.response_);
            }
            onChanged();
          }
        } else {
          if (!other.response_.isEmpty()) {
            if (responseBuilder_.isEmpty()) {
              responseBuilder_.dispose();
              responseBuilder_ = null;
              response_ = other.response_;
              bitField0_ = (bitField0_ & ~0x00000004);
              responseBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getResponseFieldBuilder() : null;
            } else {
              responseBuilder_.addAllMessages(other.response_);
            }
          }
        }
        if (other.hasBacktrace()) {
          mergeBacktrace(other.getBacktrace());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getResponseCount(); i++) {
          if (!getResponse(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.rethinkdb.QL2.Response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.rethinkdb.QL2.Response) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .Response.ResponseType type = 1;
      private com.rethinkdb.QL2.Response.ResponseType type_ = com.rethinkdb.QL2.Response.ResponseType.SUCCESS_ATOM;
      /**
       * <code>optional .Response.ResponseType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .Response.ResponseType type = 1;</code>
       */
      public com.rethinkdb.QL2.Response.ResponseType getType() {
        return type_;
      }
      /**
       * <code>optional .Response.ResponseType type = 1;</code>
       */
      public Builder setType(com.rethinkdb.QL2.Response.ResponseType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .Response.ResponseType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.rethinkdb.QL2.Response.ResponseType.SUCCESS_ATOM;
        onChanged();
        return this;
      }

      // optional int64 token = 2;
      private long token_ ;
      /**
       * <code>optional int64 token = 2;</code>
       *
       * <pre>
       * Indicates what [Query] this response corresponds to.
       * </pre>
       */
      public boolean hasToken() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 token = 2;</code>
       *
       * <pre>
       * Indicates what [Query] this response corresponds to.
       * </pre>
       */
      public long getToken() {
        return token_;
      }
      /**
       * <code>optional int64 token = 2;</code>
       *
       * <pre>
       * Indicates what [Query] this response corresponds to.
       * </pre>
       */
      public Builder setToken(long value) {
        bitField0_ |= 0x00000002;
        token_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 token = 2;</code>
       *
       * <pre>
       * Indicates what [Query] this response corresponds to.
       * </pre>
       */
      public Builder clearToken() {
        bitField0_ = (bitField0_ & ~0x00000002);
        token_ = 0L;
        onChanged();
        return this;
      }

      // repeated .Datum response = 3;
      private java.util.List<com.rethinkdb.QL2.Datum> response_ =
        java.util.Collections.emptyList();
      private void ensureResponseIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          response_ = new java.util.ArrayList<com.rethinkdb.QL2.Datum>(response_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.rethinkdb.QL2.Datum, com.rethinkdb.QL2.Datum.Builder, com.rethinkdb.QL2.DatumOrBuilder> responseBuilder_;

      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public java.util.List<com.rethinkdb.QL2.Datum> getResponseList() {
        if (responseBuilder_ == null) {
          return java.util.Collections.unmodifiableList(response_);
        } else {
          return responseBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public int getResponseCount() {
        if (responseBuilder_ == null) {
          return response_.size();
        } else {
          return responseBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public com.rethinkdb.QL2.Datum getResponse(int index) {
        if (responseBuilder_ == null) {
          return response_.get(index);
        } else {
          return responseBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public Builder setResponse(
          int index, com.rethinkdb.QL2.Datum value) {
        if (responseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResponseIsMutable();
          response_.set(index, value);
          onChanged();
        } else {
          responseBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public Builder setResponse(
          int index, com.rethinkdb.QL2.Datum.Builder builderForValue) {
        if (responseBuilder_ == null) {
          ensureResponseIsMutable();
          response_.set(index, builderForValue.build());
          onChanged();
        } else {
          responseBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public Builder addResponse(com.rethinkdb.QL2.Datum value) {
        if (responseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResponseIsMutable();
          response_.add(value);
          onChanged();
        } else {
          responseBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public Builder addResponse(
          int index, com.rethinkdb.QL2.Datum value) {
        if (responseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResponseIsMutable();
          response_.add(index, value);
          onChanged();
        } else {
          responseBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public Builder addResponse(
          com.rethinkdb.QL2.Datum.Builder builderForValue) {
        if (responseBuilder_ == null) {
          ensureResponseIsMutable();
          response_.add(builderForValue.build());
          onChanged();
        } else {
          responseBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public Builder addResponse(
          int index, com.rethinkdb.QL2.Datum.Builder builderForValue) {
        if (responseBuilder_ == null) {
          ensureResponseIsMutable();
          response_.add(index, builderForValue.build());
          onChanged();
        } else {
          responseBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public Builder addAllResponse(
          java.lang.Iterable<? extends com.rethinkdb.QL2.Datum> values) {
        if (responseBuilder_ == null) {
          ensureResponseIsMutable();
          super.addAll(values, response_);
          onChanged();
        } else {
          responseBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public Builder clearResponse() {
        if (responseBuilder_ == null) {
          response_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          responseBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public Builder removeResponse(int index) {
        if (responseBuilder_ == null) {
          ensureResponseIsMutable();
          response_.remove(index);
          onChanged();
        } else {
          responseBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public com.rethinkdb.QL2.Datum.Builder getResponseBuilder(
          int index) {
        return getResponseFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public com.rethinkdb.QL2.DatumOrBuilder getResponseOrBuilder(
          int index) {
        if (responseBuilder_ == null) {
          return response_.get(index);  } else {
          return responseBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public java.util.List<? extends com.rethinkdb.QL2.DatumOrBuilder> 
           getResponseOrBuilderList() {
        if (responseBuilder_ != null) {
          return responseBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(response_);
        }
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public com.rethinkdb.QL2.Datum.Builder addResponseBuilder() {
        return getResponseFieldBuilder().addBuilder(
            com.rethinkdb.QL2.Datum.getDefaultInstance());
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public com.rethinkdb.QL2.Datum.Builder addResponseBuilder(
          int index) {
        return getResponseFieldBuilder().addBuilder(
            index, com.rethinkdb.QL2.Datum.getDefaultInstance());
      }
      /**
       * <code>repeated .Datum response = 3;</code>
       *
       * <pre>
       * [response] contains 1 RQL datum if [type] is [SUCCESS_ATOM], or many RQL
       * data if [type] is [SUCCESS_SEQUENCE] or [SUCCESS_PARTIAL].  It contains 1
       * error message (of type [R_STR]) in all other cases.
       * </pre>
       */
      public java.util.List<com.rethinkdb.QL2.Datum.Builder> 
           getResponseBuilderList() {
        return getResponseFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.rethinkdb.QL2.Datum, com.rethinkdb.QL2.Datum.Builder, com.rethinkdb.QL2.DatumOrBuilder> 
          getResponseFieldBuilder() {
        if (responseBuilder_ == null) {
          responseBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.rethinkdb.QL2.Datum, com.rethinkdb.QL2.Datum.Builder, com.rethinkdb.QL2.DatumOrBuilder>(
                  response_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          response_ = null;
        }
        return responseBuilder_;
      }

      // optional .Backtrace backtrace = 4;
      private com.rethinkdb.QL2.Backtrace backtrace_ = com.rethinkdb.QL2.Backtrace.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.rethinkdb.QL2.Backtrace, com.rethinkdb.QL2.Backtrace.Builder, com.rethinkdb.QL2.BacktraceOrBuilder> backtraceBuilder_;
      /**
       * <code>optional .Backtrace backtrace = 4;</code>
       *
       * <pre>
       * Contains n [Frame]s when you get back an error.
       * </pre>
       */
      public boolean hasBacktrace() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .Backtrace backtrace = 4;</code>
       *
       * <pre>
       * Contains n [Frame]s when you get back an error.
       * </pre>
       */
      public com.rethinkdb.QL2.Backtrace getBacktrace() {
        if (backtraceBuilder_ == null) {
          return backtrace_;
        } else {
          return backtraceBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .Backtrace backtrace = 4;</code>
       *
       * <pre>
       * Contains n [Frame]s when you get back an error.
       * </pre>
       */
      public Builder setBacktrace(com.rethinkdb.QL2.Backtrace value) {
        if (backtraceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          backtrace_ = value;
          onChanged();
        } else {
          backtraceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .Backtrace backtrace = 4;</code>
       *
       * <pre>
       * Contains n [Frame]s when you get back an error.
       * </pre>
       */
      public Builder setBacktrace(
          com.rethinkdb.QL2.Backtrace.Builder builderForValue) {
        if (backtraceBuilder_ == null) {
          backtrace_ = builderForValue.build();
          onChanged();
        } else {
          backtraceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .Backtrace backtrace = 4;</code>
       *
       * <pre>
       * Contains n [Frame]s when you get back an error.
       * </pre>
       */
      public Builder mergeBacktrace(com.rethinkdb.QL2.Backtrace value) {
        if (backtraceBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              backtrace_ != com.rethinkdb.QL2.Backtrace.getDefaultInstance()) {
            backtrace_ =
              com.rethinkdb.QL2.Backtrace.newBuilder(backtrace_).mergeFrom(value).buildPartial();
          } else {
            backtrace_ = value;
          }
          onChanged();
        } else {
          backtraceBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .Backtrace backtrace = 4;</code>
       *
       * <pre>
       * Contains n [Frame]s when you get back an error.
       * </pre>
       */
      public Builder clearBacktrace() {
        if (backtraceBuilder_ == null) {
          backtrace_ = com.rethinkdb.QL2.Backtrace.getDefaultInstance();
          onChanged();
        } else {
          backtraceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .Backtrace backtrace = 4;</code>
       *
       * <pre>
       * Contains n [Frame]s when you get back an error.
       * </pre>
       */
      public com.rethinkdb.QL2.Backtrace.Builder getBacktraceBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getBacktraceFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Backtrace backtrace = 4;</code>
       *
       * <pre>
       * Contains n [Frame]s when you get back an error.
       * </pre>
       */
      public com.rethinkdb.QL2.BacktraceOrBuilder getBacktraceOrBuilder() {
        if (backtraceBuilder_ != null) {
          return backtraceBuilder_.getMessageOrBuilder();
        } else {
          return backtrace_;
        }
      }
      /**
       * <code>optional .Backtrace backtrace = 4;</code>
       *
       * <pre>
       * Contains n [Frame]s when you get back an error.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.rethinkdb.QL2.Backtrace, com.rethinkdb.QL2.Backtrace.Builder, com.rethinkdb.QL2.BacktraceOrBuilder> 
          getBacktraceFieldBuilder() {
        if (backtraceBuilder_ == null) {
          backtraceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.rethinkdb.QL2.Backtrace, com.rethinkdb.QL2.Backtrace.Builder, com.rethinkdb.QL2.BacktraceOrBuilder>(
                  backtrace_,
                  getParentForChildren(),
                  isClean());
          backtrace_ = null;
        }
        return backtraceBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:Response)
    }

    static {
      defaultInstance = new Response(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Response)
  }

  public interface DatumOrBuilder extends
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<Datum> {

    // optional .Datum.DatumType type = 1;
    /**
     * <code>optional .Datum.DatumType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional .Datum.DatumType type = 1;</code>
     */
    com.rethinkdb.QL2.Datum.DatumType getType();

    // optional bool r_bool = 2;
    /**
     * <code>optional bool r_bool = 2;</code>
     */
    boolean hasRBool();
    /**
     * <code>optional bool r_bool = 2;</code>
     */
    boolean getRBool();

    // optional double r_num = 3;
    /**
     * <code>optional double r_num = 3;</code>
     */
    boolean hasRNum();
    /**
     * <code>optional double r_num = 3;</code>
     */
    double getRNum();

    // optional string r_str = 4;
    /**
     * <code>optional string r_str = 4;</code>
     */
    boolean hasRStr();
    /**
     * <code>optional string r_str = 4;</code>
     */
    java.lang.String getRStr();
    /**
     * <code>optional string r_str = 4;</code>
     */
    com.google.protobuf.ByteString
        getRStrBytes();

    // repeated .Datum r_array = 5;
    /**
     * <code>repeated .Datum r_array = 5;</code>
     */
    java.util.List<com.rethinkdb.QL2.Datum> 
        getRArrayList();
    /**
     * <code>repeated .Datum r_array = 5;</code>
     */
    com.rethinkdb.QL2.Datum getRArray(int index);
    /**
     * <code>repeated .Datum r_array = 5;</code>
     */
    int getRArrayCount();
    /**
     * <code>repeated .Datum r_array = 5;</code>
     */
    java.util.List<? extends com.rethinkdb.QL2.DatumOrBuilder> 
        getRArrayOrBuilderList();
    /**
     * <code>repeated .Datum r_array = 5;</code>
     */
    com.rethinkdb.QL2.DatumOrBuilder getRArrayOrBuilder(
        int index);

    // repeated .Datum.AssocPair r_object = 6;
    /**
     * <code>repeated .Datum.AssocPair r_object = 6;</code>
     */
    java.util.List<com.rethinkdb.QL2.Datum.AssocPair> 
        getRObjectList();
    /**
     * <code>repeated .Datum.AssocPair r_object = 6;</code>
     */
    com.rethinkdb.QL2.Datum.AssocPair getRObject(int index);
    /**
     * <code>repeated .Datum.AssocPair r_object = 6;</code>
     */
    int getRObjectCount();
    /**
     * <code>repeated .Datum.AssocPair r_object = 6;</code>
     */
    java.util.List<? extends com.rethinkdb.QL2.Datum.AssocPairOrBuilder> 
        getRObjectOrBuilderList();
    /**
     * <code>repeated .Datum.AssocPair r_object = 6;</code>
     */
    com.rethinkdb.QL2.Datum.AssocPairOrBuilder getRObjectOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code Datum}
   *
   * <pre>
   * A [Datum] is a chunk of data that can be serialized to disk or returned to
   * the user in a Response.  Currently we only support JSON types, but we may
   * support other types in the future (e.g., a date type or an integer type).
   * </pre>
   */
  public static final class Datum extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        Datum> implements DatumOrBuilder {
    // Use Datum.newBuilder() to construct.
    private Datum(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.rethinkdb.QL2.Datum, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Datum(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Datum defaultInstance;
    public static Datum getDefaultInstance() {
      return defaultInstance;
    }

    public Datum getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Datum(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.rethinkdb.QL2.Datum.DatumType value = com.rethinkdb.QL2.Datum.DatumType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              rBool_ = input.readBool();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              rNum_ = input.readDouble();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              rStr_ = input.readBytes();
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                rArray_ = new java.util.ArrayList<com.rethinkdb.QL2.Datum>();
                mutable_bitField0_ |= 0x00000010;
              }
              rArray_.add(input.readMessage(com.rethinkdb.QL2.Datum.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                rObject_ = new java.util.ArrayList<com.rethinkdb.QL2.Datum.AssocPair>();
                mutable_bitField0_ |= 0x00000020;
              }
              rObject_.add(input.readMessage(com.rethinkdb.QL2.Datum.AssocPair.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          rArray_ = java.util.Collections.unmodifiableList(rArray_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          rObject_ = java.util.Collections.unmodifiableList(rObject_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.rethinkdb.QL2.internal_static_Datum_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.rethinkdb.QL2.internal_static_Datum_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.rethinkdb.QL2.Datum.class, com.rethinkdb.QL2.Datum.Builder.class);
    }

    public static com.google.protobuf.Parser<Datum> PARSER =
        new com.google.protobuf.AbstractParser<Datum>() {
      public Datum parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Datum(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Datum> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code Datum.DatumType}
     */
    public enum DatumType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>R_NULL = 1;</code>
       */
      R_NULL(0, 1),
      /**
       * <code>R_BOOL = 2;</code>
       */
      R_BOOL(1, 2),
      /**
       * <code>R_NUM = 3;</code>
       *
       * <pre>
       * a double
       * </pre>
       */
      R_NUM(2, 3),
      /**
       * <code>R_STR = 4;</code>
       */
      R_STR(3, 4),
      /**
       * <code>R_ARRAY = 5;</code>
       */
      R_ARRAY(4, 5),
      /**
       * <code>R_OBJECT = 6;</code>
       */
      R_OBJECT(5, 6),
      ;

      /**
       * <code>R_NULL = 1;</code>
       */
      public static final int R_NULL_VALUE = 1;
      /**
       * <code>R_BOOL = 2;</code>
       */
      public static final int R_BOOL_VALUE = 2;
      /**
       * <code>R_NUM = 3;</code>
       *
       * <pre>
       * a double
       * </pre>
       */
      public static final int R_NUM_VALUE = 3;
      /**
       * <code>R_STR = 4;</code>
       */
      public static final int R_STR_VALUE = 4;
      /**
       * <code>R_ARRAY = 5;</code>
       */
      public static final int R_ARRAY_VALUE = 5;
      /**
       * <code>R_OBJECT = 6;</code>
       */
      public static final int R_OBJECT_VALUE = 6;


      public final int getNumber() { return value; }

      public static DatumType valueOf(int value) {
        switch (value) {
          case 1: return R_NULL;
          case 2: return R_BOOL;
          case 3: return R_NUM;
          case 4: return R_STR;
          case 5: return R_ARRAY;
          case 6: return R_OBJECT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DatumType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<DatumType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DatumType>() {
              public DatumType findValueByNumber(int number) {
                return DatumType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.rethinkdb.QL2.Datum.getDescriptor().getEnumTypes().get(0);
      }

      private static final DatumType[] VALUES = values();

      public static DatumType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private DatumType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:Datum.DatumType)
    }

    public interface AssocPairOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional string key = 1;
      /**
       * <code>optional string key = 1;</code>
       */
      boolean hasKey();
      /**
       * <code>optional string key = 1;</code>
       */
      java.lang.String getKey();
      /**
       * <code>optional string key = 1;</code>
       */
      com.google.protobuf.ByteString
          getKeyBytes();

      // optional .Datum val = 2;
      /**
       * <code>optional .Datum val = 2;</code>
       */
      boolean hasVal();
      /**
       * <code>optional .Datum val = 2;</code>
       */
      com.rethinkdb.QL2.Datum getVal();
      /**
       * <code>optional .Datum val = 2;</code>
       */
      com.rethinkdb.QL2.DatumOrBuilder getValOrBuilder();
    }
    /**
     * Protobuf type {@code Datum.AssocPair}
     */
    public static final class AssocPair extends
        com.google.protobuf.GeneratedMessage
        implements AssocPairOrBuilder {
      // Use AssocPair.newBuilder() to construct.
      private AssocPair(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AssocPair(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AssocPair defaultInstance;
      public static AssocPair getDefaultInstance() {
        return defaultInstance;
      }

      public AssocPair getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AssocPair(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                key_ = input.readBytes();
                break;
              }
              case 18: {
                com.rethinkdb.QL2.Datum.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = val_.toBuilder();
                }
                val_ = input.readMessage(com.rethinkdb.QL2.Datum.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(val_);
                  val_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.rethinkdb.QL2.internal_static_Datum_AssocPair_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.rethinkdb.QL2.internal_static_Datum_AssocPair_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.rethinkdb.QL2.Datum.AssocPair.class, com.rethinkdb.QL2.Datum.AssocPair.Builder.class);
      }

      public static com.google.protobuf.Parser<AssocPair> PARSER =
          new com.google.protobuf.AbstractParser<AssocPair>() {
        public AssocPair parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AssocPair(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AssocPair> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional string key = 1;
      public static final int KEY_FIELD_NUMBER = 1;
      private java.lang.Object key_;
      /**
       * <code>optional string key = 1;</code>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string key = 1;</code>
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            key_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string key = 1;</code>
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // optional .Datum val = 2;
      public static final int VAL_FIELD_NUMBER = 2;
      private com.rethinkdb.QL2.Datum val_;
      /**
       * <code>optional .Datum val = 2;</code>
       */
      public boolean hasVal() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .Datum val = 2;</code>
       */
      public com.rethinkdb.QL2.Datum getVal() {
        return val_;
      }
      /**
       * <code>optional .Datum val = 2;</code>
       */
      public com.rethinkdb.QL2.DatumOrBuilder getValOrBuilder() {
        return val_;
      }

      private void initFields() {
        key_ = "";
        val_ = com.rethinkdb.QL2.Datum.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasVal()) {
          if (!getVal().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getKeyBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, val_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getKeyBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, val_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.rethinkdb.QL2.Datum.AssocPair parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.rethinkdb.QL2.Datum.AssocPair parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.rethinkdb.QL2.Datum.AssocPair parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.rethinkdb.QL2.Datum.AssocPair parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.rethinkdb.QL2.Datum.AssocPair parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.rethinkdb.QL2.Datum.AssocPair parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.rethinkdb.QL2.Datum.AssocPair parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.rethinkdb.QL2.Datum.AssocPair parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.rethinkdb.QL2.Datum.AssocPair parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.rethinkdb.QL2.Datum.AssocPair parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.rethinkdb.QL2.Datum.AssocPair prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code Datum.AssocPair}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.rethinkdb.QL2.Datum.AssocPairOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.rethinkdb.QL2.internal_static_Datum_AssocPair_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.rethinkdb.QL2.internal_static_Datum_AssocPair_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.rethinkdb.QL2.Datum.AssocPair.class, com.rethinkdb.QL2.Datum.AssocPair.Builder.class);
        }

        // Construct using com.rethinkdb.QL2.Datum.AssocPair.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getValFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          key_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          if (valBuilder_ == null) {
            val_ = com.rethinkdb.QL2.Datum.getDefaultInstance();
          } else {
            valBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.rethinkdb.QL2.internal_static_Datum_AssocPair_descriptor;
        }

        public com.rethinkdb.QL2.Datum.AssocPair getDefaultInstanceForType() {
          return com.rethinkdb.QL2.Datum.AssocPair.getDefaultInstance();
        }

        public com.rethinkdb.QL2.Datum.AssocPair build() {
          com.rethinkdb.QL2.Datum.AssocPair result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.rethinkdb.QL2.Datum.AssocPair buildPartial() {
          com.rethinkdb.QL2.Datum.AssocPair result = new com.rethinkdb.QL2.Datum.AssocPair(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.key_ = key_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (valBuilder_ == null) {
            result.val_ = val_;
          } else {
            result.val_ = valBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.rethinkdb.QL2.Datum.AssocPair) {
            return mergeFrom((com.rethinkdb.QL2.Datum.AssocPair)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.rethinkdb.QL2.Datum.AssocPair other) {
          if (other == com.rethinkdb.QL2.Datum.AssocPair.getDefaultInstance()) return this;
          if (other.hasKey()) {
            bitField0_ |= 0x00000001;
            key_ = other.key_;
            onChanged();
          }
          if (other.hasVal()) {
            mergeVal(other.getVal());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasVal()) {
            if (!getVal().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.rethinkdb.QL2.Datum.AssocPair parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.rethinkdb.QL2.Datum.AssocPair) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional string key = 1;
        private java.lang.Object key_ = "";
        /**
         * <code>optional string key = 1;</code>
         */
        public boolean hasKey() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string key = 1;</code>
         */
        public java.lang.String getKey() {
          java.lang.Object ref = key_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            key_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string key = 1;</code>
         */
        public com.google.protobuf.ByteString
            getKeyBytes() {
          java.lang.Object ref = key_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            key_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string key = 1;</code>
         */
        public Builder setKey(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          key_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string key = 1;</code>
         */
        public Builder clearKey() {
          bitField0_ = (bitField0_ & ~0x00000001);
          key_ = getDefaultInstance().getKey();
          onChanged();
          return this;
        }
        /**
         * <code>optional string key = 1;</code>
         */
        public Builder setKeyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          key_ = value;
          onChanged();
          return this;
        }

        // optional .Datum val = 2;
        private com.rethinkdb.QL2.Datum val_ = com.rethinkdb.QL2.Datum.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            com.rethinkdb.QL2.Datum, com.rethinkdb.QL2.Datum.Builder, com.rethinkdb.QL2.DatumOrBuilder> valBuilder_;
        /**
         * <code>optional .Datum val = 2;</code>
         */
        public boolean hasVal() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .Datum val = 2;</code>
         */
        public com.rethinkdb.QL2.Datum getVal() {
          if (valBuilder_ == null) {
            return val_;
          } else {
            return valBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .Datum val = 2;</code>
         */
        public Builder setVal(com.rethinkdb.QL2.Datum value) {
          if (valBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            val_ = value;
            onChanged();
          } else {
            valBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .Datum val = 2;</code>
         */
        public Builder setVal(
            com.rethinkdb.QL2.Datum.Builder builderForValue) {
          if (valBuilder_ == null) {
            val_ = builderForValue.build();
            onChanged();
          } else {
            valBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .Datum val = 2;</code>
         */
        public Builder mergeVal(com.rethinkdb.QL2.Datum value) {
          if (valBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                val_ != com.rethinkdb.QL2.Datum.getDefaultInstance()) {
              val_ =
                com.rethinkdb.QL2.Datum.newBuilder(val_).mergeFrom(value).buildPartial();
            } else {
              val_ = value;
            }
            onChanged();
          } else {
            valBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .Datum val = 2;</code>
         */
        public Builder clearVal() {
          if (valBuilder_ == null) {
            val_ = com.rethinkdb.QL2.Datum.getDefaultInstance();
            onChanged();
          } else {
            valBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .Datum val = 2;</code>
         */
        public com.rethinkdb.QL2.Datum.Builder getValBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getValFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .Datum val = 2;</code>
         */
        public com.rethinkdb.QL2.DatumOrBuilder getValOrBuilder() {
          if (valBuilder_ != null) {
            return valBuilder_.getMessageOrBuilder();
          } else {
            return val_;
          }
        }
        /**
         * <code>optional .Datum val = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.rethinkdb.QL2.Datum, com.rethinkdb.QL2.Datum.Builder, com.rethinkdb.QL2.DatumOrBuilder> 
            getValFieldBuilder() {
          if (valBuilder_ == null) {
            valBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.rethinkdb.QL2.Datum, com.rethinkdb.QL2.Datum.Builder, com.rethinkdb.QL2.DatumOrBuilder>(
                    val_,
                    getParentForChildren(),
                    isClean());
            val_ = null;
          }
          return valBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:Datum.AssocPair)
      }

      static {
        defaultInstance = new AssocPair(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:Datum.AssocPair)
    }

    private int bitField0_;
    // optional .Datum.DatumType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private com.rethinkdb.QL2.Datum.DatumType type_;
    /**
     * <code>optional .Datum.DatumType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .Datum.DatumType type = 1;</code>
     */
    public com.rethinkdb.QL2.Datum.DatumType getType() {
      return type_;
    }

    // optional bool r_bool = 2;
    public static final int R_BOOL_FIELD_NUMBER = 2;
    private boolean rBool_;
    /**
     * <code>optional bool r_bool = 2;</code>
     */
    public boolean hasRBool() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool r_bool = 2;</code>
     */
    public boolean getRBool() {
      return rBool_;
    }

    // optional double r_num = 3;
    public static final int R_NUM_FIELD_NUMBER = 3;
    private double rNum_;
    /**
     * <code>optional double r_num = 3;</code>
     */
    public boolean hasRNum() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional double r_num = 3;</code>
     */
    public double getRNum() {
      return rNum_;
    }

    // optional string r_str = 4;
    public static final int R_STR_FIELD_NUMBER = 4;
    private java.lang.Object rStr_;
    /**
     * <code>optional string r_str = 4;</code>
     */
    public boolean hasRStr() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string r_str = 4;</code>
     */
    public java.lang.String getRStr() {
      java.lang.Object ref = rStr_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          rStr_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string r_str = 4;</code>
     */
    public com.google.protobuf.ByteString
        getRStrBytes() {
      java.lang.Object ref = rStr_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        rStr_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated .Datum r_array = 5;
    public static final int R_ARRAY_FIELD_NUMBER = 5;
    private java.util.List<com.rethinkdb.QL2.Datum> rArray_;
    /**
     * <code>repeated .Datum r_array = 5;</code>
     */
    public java.util.List<com.rethinkdb.QL2.Datum> getRArrayList() {
      return rArray_;
    }
    /**
     * <code>repeated .Datum r_array = 5;</code>
     */
    public java.util.List<? extends com.rethinkdb.QL2.DatumOrBuilder> 
        getRArrayOrBuilderList() {
      return rArray_;
    }
    /**
     * <code>repeated .Datum r_array = 5;</code>
     */
    public int getRArrayCount() {
      return rArray_.size();
    }
    /**
     * <code>repeated .Datum r_array = 5;</code>
     */
    public com.rethinkdb.QL2.Datum getRArray(int index) {
      return rArray_.get(index);
    }
    /**
     * <code>repeated .Datum r_array = 5;</code>
     */
    public com.rethinkdb.QL2.DatumOrBuilder getRArrayOrBuilder(
        int index) {
      return rArray_.get(index);
    }

    // repeated .Datum.AssocPair r_object = 6;
    public static final int R_OBJECT_FIELD_NUMBER = 6;
    private java.util.List<com.rethinkdb.QL2.Datum.AssocPair> rObject_;
    /**
     * <code>repeated .Datum.AssocPair r_object = 6;</code>
     */
    public java.util.List<com.rethinkdb.QL2.Datum.AssocPair> getRObjectList() {
      return rObject_;
    }
    /**
     * <code>repeated .Datum.AssocPair r_object = 6;</code>
     */
    public java.util.List<? extends com.rethinkdb.QL2.Datum.AssocPairOrBuilder> 
        getRObjectOrBuilderList() {
      return rObject_;
    }
    /**
     * <code>repeated .Datum.AssocPair r_object = 6;</code>
     */
    public int getRObjectCount() {
      return rObject_.size();
    }
    /**
     * <code>repeated .Datum.AssocPair r_object = 6;</code>
     */
    public com.rethinkdb.QL2.Datum.AssocPair getRObject(int index) {
      return rObject_.get(index);
    }
    /**
     * <code>repeated .Datum.AssocPair r_object = 6;</code>
     */
    public com.rethinkdb.QL2.Datum.AssocPairOrBuilder getRObjectOrBuilder(
        int index) {
      return rObject_.get(index);
    }

    private void initFields() {
      type_ = com.rethinkdb.QL2.Datum.DatumType.R_NULL;
      rBool_ = false;
      rNum_ = 0D;
      rStr_ = "";
      rArray_ = java.util.Collections.emptyList();
      rObject_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getRArrayCount(); i++) {
        if (!getRArray(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getRObjectCount(); i++) {
        if (!getRObject(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<com.rethinkdb.QL2.Datum>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, rBool_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, rNum_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getRStrBytes());
      }
      for (int i = 0; i < rArray_.size(); i++) {
        output.writeMessage(5, rArray_.get(i));
      }
      for (int i = 0; i < rObject_.size(); i++) {
        output.writeMessage(6, rObject_.get(i));
      }
      extensionWriter.writeUntil(20001, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, rBool_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, rNum_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getRStrBytes());
      }
      for (int i = 0; i < rArray_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, rArray_.get(i));
      }
      for (int i = 0; i < rObject_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, rObject_.get(i));
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.rethinkdb.QL2.Datum parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.rethinkdb.QL2.Datum parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Datum parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.rethinkdb.QL2.Datum parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Datum parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.rethinkdb.QL2.Datum parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Datum parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.rethinkdb.QL2.Datum parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Datum parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.rethinkdb.QL2.Datum parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.rethinkdb.QL2.Datum prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Datum}
     *
     * <pre>
     * A [Datum] is a chunk of data that can be serialized to disk or returned to
     * the user in a Response.  Currently we only support JSON types, but we may
     * support other types in the future (e.g., a date type or an integer type).
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          com.rethinkdb.QL2.Datum, Builder> implements com.rethinkdb.QL2.DatumOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.rethinkdb.QL2.internal_static_Datum_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.rethinkdb.QL2.internal_static_Datum_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.rethinkdb.QL2.Datum.class, com.rethinkdb.QL2.Datum.Builder.class);
      }

      // Construct using com.rethinkdb.QL2.Datum.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRArrayFieldBuilder();
          getRObjectFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = com.rethinkdb.QL2.Datum.DatumType.R_NULL;
        bitField0_ = (bitField0_ & ~0x00000001);
        rBool_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        rNum_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        rStr_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        if (rArrayBuilder_ == null) {
          rArray_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          rArrayBuilder_.clear();
        }
        if (rObjectBuilder_ == null) {
          rObject_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          rObjectBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.rethinkdb.QL2.internal_static_Datum_descriptor;
      }

      public com.rethinkdb.QL2.Datum getDefaultInstanceForType() {
        return com.rethinkdb.QL2.Datum.getDefaultInstance();
      }

      public com.rethinkdb.QL2.Datum build() {
        com.rethinkdb.QL2.Datum result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.rethinkdb.QL2.Datum buildPartial() {
        com.rethinkdb.QL2.Datum result = new com.rethinkdb.QL2.Datum(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.rBool_ = rBool_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.rNum_ = rNum_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.rStr_ = rStr_;
        if (rArrayBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            rArray_ = java.util.Collections.unmodifiableList(rArray_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.rArray_ = rArray_;
        } else {
          result.rArray_ = rArrayBuilder_.build();
        }
        if (rObjectBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            rObject_ = java.util.Collections.unmodifiableList(rObject_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.rObject_ = rObject_;
        } else {
          result.rObject_ = rObjectBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.rethinkdb.QL2.Datum) {
          return mergeFrom((com.rethinkdb.QL2.Datum)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.rethinkdb.QL2.Datum other) {
        if (other == com.rethinkdb.QL2.Datum.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasRBool()) {
          setRBool(other.getRBool());
        }
        if (other.hasRNum()) {
          setRNum(other.getRNum());
        }
        if (other.hasRStr()) {
          bitField0_ |= 0x00000008;
          rStr_ = other.rStr_;
          onChanged();
        }
        if (rArrayBuilder_ == null) {
          if (!other.rArray_.isEmpty()) {
            if (rArray_.isEmpty()) {
              rArray_ = other.rArray_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureRArrayIsMutable();
              rArray_.addAll(other.rArray_);
            }
            onChanged();
          }
        } else {
          if (!other.rArray_.isEmpty()) {
            if (rArrayBuilder_.isEmpty()) {
              rArrayBuilder_.dispose();
              rArrayBuilder_ = null;
              rArray_ = other.rArray_;
              bitField0_ = (bitField0_ & ~0x00000010);
              rArrayBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRArrayFieldBuilder() : null;
            } else {
              rArrayBuilder_.addAllMessages(other.rArray_);
            }
          }
        }
        if (rObjectBuilder_ == null) {
          if (!other.rObject_.isEmpty()) {
            if (rObject_.isEmpty()) {
              rObject_ = other.rObject_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureRObjectIsMutable();
              rObject_.addAll(other.rObject_);
            }
            onChanged();
          }
        } else {
          if (!other.rObject_.isEmpty()) {
            if (rObjectBuilder_.isEmpty()) {
              rObjectBuilder_.dispose();
              rObjectBuilder_ = null;
              rObject_ = other.rObject_;
              bitField0_ = (bitField0_ & ~0x00000020);
              rObjectBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRObjectFieldBuilder() : null;
            } else {
              rObjectBuilder_.addAllMessages(other.rObject_);
            }
          }
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getRArrayCount(); i++) {
          if (!getRArray(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getRObjectCount(); i++) {
          if (!getRObject(i).isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.rethinkdb.QL2.Datum parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.rethinkdb.QL2.Datum) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .Datum.DatumType type = 1;
      private com.rethinkdb.QL2.Datum.DatumType type_ = com.rethinkdb.QL2.Datum.DatumType.R_NULL;
      /**
       * <code>optional .Datum.DatumType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .Datum.DatumType type = 1;</code>
       */
      public com.rethinkdb.QL2.Datum.DatumType getType() {
        return type_;
      }
      /**
       * <code>optional .Datum.DatumType type = 1;</code>
       */
      public Builder setType(com.rethinkdb.QL2.Datum.DatumType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .Datum.DatumType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.rethinkdb.QL2.Datum.DatumType.R_NULL;
        onChanged();
        return this;
      }

      // optional bool r_bool = 2;
      private boolean rBool_ ;
      /**
       * <code>optional bool r_bool = 2;</code>
       */
      public boolean hasRBool() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool r_bool = 2;</code>
       */
      public boolean getRBool() {
        return rBool_;
      }
      /**
       * <code>optional bool r_bool = 2;</code>
       */
      public Builder setRBool(boolean value) {
        bitField0_ |= 0x00000002;
        rBool_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool r_bool = 2;</code>
       */
      public Builder clearRBool() {
        bitField0_ = (bitField0_ & ~0x00000002);
        rBool_ = false;
        onChanged();
        return this;
      }

      // optional double r_num = 3;
      private double rNum_ ;
      /**
       * <code>optional double r_num = 3;</code>
       */
      public boolean hasRNum() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double r_num = 3;</code>
       */
      public double getRNum() {
        return rNum_;
      }
      /**
       * <code>optional double r_num = 3;</code>
       */
      public Builder setRNum(double value) {
        bitField0_ |= 0x00000004;
        rNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double r_num = 3;</code>
       */
      public Builder clearRNum() {
        bitField0_ = (bitField0_ & ~0x00000004);
        rNum_ = 0D;
        onChanged();
        return this;
      }

      // optional string r_str = 4;
      private java.lang.Object rStr_ = "";
      /**
       * <code>optional string r_str = 4;</code>
       */
      public boolean hasRStr() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string r_str = 4;</code>
       */
      public java.lang.String getRStr() {
        java.lang.Object ref = rStr_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          rStr_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string r_str = 4;</code>
       */
      public com.google.protobuf.ByteString
          getRStrBytes() {
        java.lang.Object ref = rStr_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          rStr_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string r_str = 4;</code>
       */
      public Builder setRStr(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        rStr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string r_str = 4;</code>
       */
      public Builder clearRStr() {
        bitField0_ = (bitField0_ & ~0x00000008);
        rStr_ = getDefaultInstance().getRStr();
        onChanged();
        return this;
      }
      /**
       * <code>optional string r_str = 4;</code>
       */
      public Builder setRStrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        rStr_ = value;
        onChanged();
        return this;
      }

      // repeated .Datum r_array = 5;
      private java.util.List<com.rethinkdb.QL2.Datum> rArray_ =
        java.util.Collections.emptyList();
      private void ensureRArrayIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          rArray_ = new java.util.ArrayList<com.rethinkdb.QL2.Datum>(rArray_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.rethinkdb.QL2.Datum, com.rethinkdb.QL2.Datum.Builder, com.rethinkdb.QL2.DatumOrBuilder> rArrayBuilder_;

      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public java.util.List<com.rethinkdb.QL2.Datum> getRArrayList() {
        if (rArrayBuilder_ == null) {
          return java.util.Collections.unmodifiableList(rArray_);
        } else {
          return rArrayBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public int getRArrayCount() {
        if (rArrayBuilder_ == null) {
          return rArray_.size();
        } else {
          return rArrayBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public com.rethinkdb.QL2.Datum getRArray(int index) {
        if (rArrayBuilder_ == null) {
          return rArray_.get(index);
        } else {
          return rArrayBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public Builder setRArray(
          int index, com.rethinkdb.QL2.Datum value) {
        if (rArrayBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRArrayIsMutable();
          rArray_.set(index, value);
          onChanged();
        } else {
          rArrayBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public Builder setRArray(
          int index, com.rethinkdb.QL2.Datum.Builder builderForValue) {
        if (rArrayBuilder_ == null) {
          ensureRArrayIsMutable();
          rArray_.set(index, builderForValue.build());
          onChanged();
        } else {
          rArrayBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public Builder addRArray(com.rethinkdb.QL2.Datum value) {
        if (rArrayBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRArrayIsMutable();
          rArray_.add(value);
          onChanged();
        } else {
          rArrayBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public Builder addRArray(
          int index, com.rethinkdb.QL2.Datum value) {
        if (rArrayBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRArrayIsMutable();
          rArray_.add(index, value);
          onChanged();
        } else {
          rArrayBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public Builder addRArray(
          com.rethinkdb.QL2.Datum.Builder builderForValue) {
        if (rArrayBuilder_ == null) {
          ensureRArrayIsMutable();
          rArray_.add(builderForValue.build());
          onChanged();
        } else {
          rArrayBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public Builder addRArray(
          int index, com.rethinkdb.QL2.Datum.Builder builderForValue) {
        if (rArrayBuilder_ == null) {
          ensureRArrayIsMutable();
          rArray_.add(index, builderForValue.build());
          onChanged();
        } else {
          rArrayBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public Builder addAllRArray(
          java.lang.Iterable<? extends com.rethinkdb.QL2.Datum> values) {
        if (rArrayBuilder_ == null) {
          ensureRArrayIsMutable();
          super.addAll(values, rArray_);
          onChanged();
        } else {
          rArrayBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public Builder clearRArray() {
        if (rArrayBuilder_ == null) {
          rArray_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          rArrayBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public Builder removeRArray(int index) {
        if (rArrayBuilder_ == null) {
          ensureRArrayIsMutable();
          rArray_.remove(index);
          onChanged();
        } else {
          rArrayBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public com.rethinkdb.QL2.Datum.Builder getRArrayBuilder(
          int index) {
        return getRArrayFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public com.rethinkdb.QL2.DatumOrBuilder getRArrayOrBuilder(
          int index) {
        if (rArrayBuilder_ == null) {
          return rArray_.get(index);  } else {
          return rArrayBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public java.util.List<? extends com.rethinkdb.QL2.DatumOrBuilder> 
           getRArrayOrBuilderList() {
        if (rArrayBuilder_ != null) {
          return rArrayBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(rArray_);
        }
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public com.rethinkdb.QL2.Datum.Builder addRArrayBuilder() {
        return getRArrayFieldBuilder().addBuilder(
            com.rethinkdb.QL2.Datum.getDefaultInstance());
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public com.rethinkdb.QL2.Datum.Builder addRArrayBuilder(
          int index) {
        return getRArrayFieldBuilder().addBuilder(
            index, com.rethinkdb.QL2.Datum.getDefaultInstance());
      }
      /**
       * <code>repeated .Datum r_array = 5;</code>
       */
      public java.util.List<com.rethinkdb.QL2.Datum.Builder> 
           getRArrayBuilderList() {
        return getRArrayFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.rethinkdb.QL2.Datum, com.rethinkdb.QL2.Datum.Builder, com.rethinkdb.QL2.DatumOrBuilder> 
          getRArrayFieldBuilder() {
        if (rArrayBuilder_ == null) {
          rArrayBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.rethinkdb.QL2.Datum, com.rethinkdb.QL2.Datum.Builder, com.rethinkdb.QL2.DatumOrBuilder>(
                  rArray_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          rArray_ = null;
        }
        return rArrayBuilder_;
      }

      // repeated .Datum.AssocPair r_object = 6;
      private java.util.List<com.rethinkdb.QL2.Datum.AssocPair> rObject_ =
        java.util.Collections.emptyList();
      private void ensureRObjectIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          rObject_ = new java.util.ArrayList<com.rethinkdb.QL2.Datum.AssocPair>(rObject_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.rethinkdb.QL2.Datum.AssocPair, com.rethinkdb.QL2.Datum.AssocPair.Builder, com.rethinkdb.QL2.Datum.AssocPairOrBuilder> rObjectBuilder_;

      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public java.util.List<com.rethinkdb.QL2.Datum.AssocPair> getRObjectList() {
        if (rObjectBuilder_ == null) {
          return java.util.Collections.unmodifiableList(rObject_);
        } else {
          return rObjectBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public int getRObjectCount() {
        if (rObjectBuilder_ == null) {
          return rObject_.size();
        } else {
          return rObjectBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public com.rethinkdb.QL2.Datum.AssocPair getRObject(int index) {
        if (rObjectBuilder_ == null) {
          return rObject_.get(index);
        } else {
          return rObjectBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public Builder setRObject(
          int index, com.rethinkdb.QL2.Datum.AssocPair value) {
        if (rObjectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRObjectIsMutable();
          rObject_.set(index, value);
          onChanged();
        } else {
          rObjectBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public Builder setRObject(
          int index, com.rethinkdb.QL2.Datum.AssocPair.Builder builderForValue) {
        if (rObjectBuilder_ == null) {
          ensureRObjectIsMutable();
          rObject_.set(index, builderForValue.build());
          onChanged();
        } else {
          rObjectBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public Builder addRObject(com.rethinkdb.QL2.Datum.AssocPair value) {
        if (rObjectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRObjectIsMutable();
          rObject_.add(value);
          onChanged();
        } else {
          rObjectBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public Builder addRObject(
          int index, com.rethinkdb.QL2.Datum.AssocPair value) {
        if (rObjectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRObjectIsMutable();
          rObject_.add(index, value);
          onChanged();
        } else {
          rObjectBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public Builder addRObject(
          com.rethinkdb.QL2.Datum.AssocPair.Builder builderForValue) {
        if (rObjectBuilder_ == null) {
          ensureRObjectIsMutable();
          rObject_.add(builderForValue.build());
          onChanged();
        } else {
          rObjectBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public Builder addRObject(
          int index, com.rethinkdb.QL2.Datum.AssocPair.Builder builderForValue) {
        if (rObjectBuilder_ == null) {
          ensureRObjectIsMutable();
          rObject_.add(index, builderForValue.build());
          onChanged();
        } else {
          rObjectBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public Builder addAllRObject(
          java.lang.Iterable<? extends com.rethinkdb.QL2.Datum.AssocPair> values) {
        if (rObjectBuilder_ == null) {
          ensureRObjectIsMutable();
          super.addAll(values, rObject_);
          onChanged();
        } else {
          rObjectBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public Builder clearRObject() {
        if (rObjectBuilder_ == null) {
          rObject_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          rObjectBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public Builder removeRObject(int index) {
        if (rObjectBuilder_ == null) {
          ensureRObjectIsMutable();
          rObject_.remove(index);
          onChanged();
        } else {
          rObjectBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public com.rethinkdb.QL2.Datum.AssocPair.Builder getRObjectBuilder(
          int index) {
        return getRObjectFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public com.rethinkdb.QL2.Datum.AssocPairOrBuilder getRObjectOrBuilder(
          int index) {
        if (rObjectBuilder_ == null) {
          return rObject_.get(index);  } else {
          return rObjectBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public java.util.List<? extends com.rethinkdb.QL2.Datum.AssocPairOrBuilder> 
           getRObjectOrBuilderList() {
        if (rObjectBuilder_ != null) {
          return rObjectBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(rObject_);
        }
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public com.rethinkdb.QL2.Datum.AssocPair.Builder addRObjectBuilder() {
        return getRObjectFieldBuilder().addBuilder(
            com.rethinkdb.QL2.Datum.AssocPair.getDefaultInstance());
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public com.rethinkdb.QL2.Datum.AssocPair.Builder addRObjectBuilder(
          int index) {
        return getRObjectFieldBuilder().addBuilder(
            index, com.rethinkdb.QL2.Datum.AssocPair.getDefaultInstance());
      }
      /**
       * <code>repeated .Datum.AssocPair r_object = 6;</code>
       */
      public java.util.List<com.rethinkdb.QL2.Datum.AssocPair.Builder> 
           getRObjectBuilderList() {
        return getRObjectFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.rethinkdb.QL2.Datum.AssocPair, com.rethinkdb.QL2.Datum.AssocPair.Builder, com.rethinkdb.QL2.Datum.AssocPairOrBuilder> 
          getRObjectFieldBuilder() {
        if (rObjectBuilder_ == null) {
          rObjectBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.rethinkdb.QL2.Datum.AssocPair, com.rethinkdb.QL2.Datum.AssocPair.Builder, com.rethinkdb.QL2.Datum.AssocPairOrBuilder>(
                  rObject_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          rObject_ = null;
        }
        return rObjectBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:Datum)
    }

    static {
      defaultInstance = new Datum(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Datum)
  }

  public interface TermOrBuilder extends
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<Term> {

    // optional .Term.TermType type = 1;
    /**
     * <code>optional .Term.TermType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional .Term.TermType type = 1;</code>
     */
    com.rethinkdb.QL2.Term.TermType getType();

    // optional .Datum datum = 2;
    /**
     * <code>optional .Datum datum = 2;</code>
     *
     * <pre>
     * This is only used when type is DATUM.
     * </pre>
     */
    boolean hasDatum();
    /**
     * <code>optional .Datum datum = 2;</code>
     *
     * <pre>
     * This is only used when type is DATUM.
     * </pre>
     */
    com.rethinkdb.QL2.Datum getDatum();
    /**
     * <code>optional .Datum datum = 2;</code>
     *
     * <pre>
     * This is only used when type is DATUM.
     * </pre>
     */
    com.rethinkdb.QL2.DatumOrBuilder getDatumOrBuilder();

    // repeated .Term args = 3;
    /**
     * <code>repeated .Term args = 3;</code>
     *
     * <pre>
     * Holds the positional arguments of the query.
     * </pre>
     */
    java.util.List<com.rethinkdb.QL2.Term> 
        getArgsList();
    /**
     * <code>repeated .Term args = 3;</code>
     *
     * <pre>
     * Holds the positional arguments of the query.
     * </pre>
     */
    com.rethinkdb.QL2.Term getArgs(int index);
    /**
     * <code>repeated .Term args = 3;</code>
     *
     * <pre>
     * Holds the positional arguments of the query.
     * </pre>
     */
    int getArgsCount();
    /**
     * <code>repeated .Term args = 3;</code>
     *
     * <pre>
     * Holds the positional arguments of the query.
     * </pre>
     */
    java.util.List<? extends com.rethinkdb.QL2.TermOrBuilder> 
        getArgsOrBuilderList();
    /**
     * <code>repeated .Term args = 3;</code>
     *
     * <pre>
     * Holds the positional arguments of the query.
     * </pre>
     */
    com.rethinkdb.QL2.TermOrBuilder getArgsOrBuilder(
        int index);

    // repeated .Term.AssocPair optargs = 4;
    /**
     * <code>repeated .Term.AssocPair optargs = 4;</code>
     *
     * <pre>
     * Holds the optional arguments of the query.
     * </pre>
     */
    java.util.List<com.rethinkdb.QL2.Term.AssocPair> 
        getOptargsList();
    /**
     * <code>repeated .Term.AssocPair optargs = 4;</code>
     *
     * <pre>
     * Holds the optional arguments of the query.
     * </pre>
     */
    com.rethinkdb.QL2.Term.AssocPair getOptargs(int index);
    /**
     * <code>repeated .Term.AssocPair optargs = 4;</code>
     *
     * <pre>
     * Holds the optional arguments of the query.
     * </pre>
     */
    int getOptargsCount();
    /**
     * <code>repeated .Term.AssocPair optargs = 4;</code>
     *
     * <pre>
     * Holds the optional arguments of the query.
     * </pre>
     */
    java.util.List<? extends com.rethinkdb.QL2.Term.AssocPairOrBuilder> 
        getOptargsOrBuilderList();
    /**
     * <code>repeated .Term.AssocPair optargs = 4;</code>
     *
     * <pre>
     * Holds the optional arguments of the query.
     * </pre>
     */
    com.rethinkdb.QL2.Term.AssocPairOrBuilder getOptargsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code Term}
   *
   * <pre>
   * A [Term] is either a piece of data (see **Datum** above), or an operator and
   * its operands.  If you have a [Datum], it's stored in the member [datum].  If
   * you have an operator, its positional arguments are stored in [args] and its
   * optional arguments are stored in [optargs].
   *
   * A note about type signatures:
   * We use the following notation to denote types:
   *   arg1_type, arg2_type, argrest_type... -&gt; result_type
   * So, for example, if we have a function `avg` that takes any number of
   * arguments and averages them, we might write:
   *   NUMBER... -&gt; NUMBER
   * Or if we had a function that took one number modulo another:
   *   NUMBER, NUMBER -&gt; NUMBER
   * Or a function that takes a table and a primary key of any Datum type, then
   * retrieves the entry with that primary key:
   *   Table, DATUM -&gt; OBJECT
   * Some arguments must be provided as literal values (and not the results of sub
   * terms).  These are marked with a `!`.
   * Optional arguments are specified within curly braces as argname `:` value
   * type (e.x `{use_outdated:BOOL}`)
   * Many RQL operations are polymorphic. For these, alterantive type signatures
   * are separated by `|`.
   *
   * The RQL type hierarchy is as follows:
   *   Top
   *     DATUM
   *       NULL
   *       BOOL
   *       NUMBER
   *       STRING
   *       OBJECT
   *         SingleSelection
   *       ARRAY
   *     Sequence
   *       ARRAY
   *       Stream
   *         StreamSelection
   *           Table
   *     Database
   *     Function
   *     Ordering - used only by ORDER_BY
   *   Error
   * </pre>
   */
  public static final class Term extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        Term> implements TermOrBuilder {
    // Use Term.newBuilder() to construct.
    private Term(com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.rethinkdb.QL2.Term, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Term(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Term defaultInstance;
    public static Term getDefaultInstance() {
      return defaultInstance;
    }

    public Term getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Term(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.rethinkdb.QL2.Term.TermType value = com.rethinkdb.QL2.Term.TermType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              com.rethinkdb.QL2.Datum.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = datum_.toBuilder();
              }
              datum_ = input.readMessage(com.rethinkdb.QL2.Datum.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(datum_);
                datum_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                args_ = new java.util.ArrayList<com.rethinkdb.QL2.Term>();
                mutable_bitField0_ |= 0x00000004;
              }
              args_.add(input.readMessage(com.rethinkdb.QL2.Term.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                optargs_ = new java.util.ArrayList<com.rethinkdb.QL2.Term.AssocPair>();
                mutable_bitField0_ |= 0x00000008;
              }
              optargs_.add(input.readMessage(com.rethinkdb.QL2.Term.AssocPair.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          args_ = java.util.Collections.unmodifiableList(args_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          optargs_ = java.util.Collections.unmodifiableList(optargs_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.rethinkdb.QL2.internal_static_Term_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.rethinkdb.QL2.internal_static_Term_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.rethinkdb.QL2.Term.class, com.rethinkdb.QL2.Term.Builder.class);
    }

    public static com.google.protobuf.Parser<Term> PARSER =
        new com.google.protobuf.AbstractParser<Term>() {
      public Term parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Term(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Term> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code Term.TermType}
     */
    public enum TermType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DATUM = 1;</code>
       *
       * <pre>
       * A RQL datum, stored in `datum` below.
       * </pre>
       */
      DATUM(0, 1),
      /**
       * <code>MAKE_ARRAY = 2;</code>
       *
       * <pre>
       * DATUM... -&gt; ARRAY
       * </pre>
       */
      MAKE_ARRAY(1, 2),
      /**
       * <code>MAKE_OBJ = 3;</code>
       *
       * <pre>
       * Evaluate the terms in [optargs] and make an object
       * </pre>
       */
      MAKE_OBJ(2, 3),
      /**
       * <code>VAR = 10;</code>
       *
       * <pre>
       * * Compound types
       * Takes an integer representing a variable and returns the value stored
       * in that variable.  It's the responsibility of the client to translate
       * from their local representation of a variable to a unique integer for
       * that variable.  (We do it this way instead of letting clients provide
       * variable names as strings to discourage variable-capturing client
       * libraries, and because it's more efficient on the wire.)
       * </pre>
       */
      VAR(3, 10),
      /**
       * <code>JAVASCRIPT = 11;</code>
       *
       * <pre>
       * Takes some javascript code and executes it.
       * </pre>
       */
      JAVASCRIPT(4, 11),
      /**
       * <code>ERROR = 12;</code>
       *
       * <pre>
       * STRING {timeout: !NUMBER} -&gt; Function(*)
       * Takes a string and throws an error with that message.
       * </pre>
       */
      ERROR(5, 12),
      /**
       * <code>IMPLICIT_VAR = 13;</code>
       *
       * <pre>
       * Takes nothing and returns a reference to the implicit variable.
       * </pre>
       */
      IMPLICIT_VAR(6, 13),
      /**
       * <code>DB = 14;</code>
       *
       * <pre>
       * * Data Operators
       * Returns a reference to a database.
       * </pre>
       */
      DB(7, 14),
      /**
       * <code>TABLE = 15;</code>
       *
       * <pre>
       * Returns a reference to a table.
       * </pre>
       */
      TABLE(8, 15),
      /**
       * <code>GET = 16;</code>
       *
       * <pre>
       * Gets a single element from a table by its primary or a secondary key.
       * </pre>
       */
      GET(9, 16),
      /**
       * <code>GET_ALL = 78;</code>
       *
       * <pre>
       * Table, STRING -&gt; NULL            | Table, NUMBER -&gt; NULL |
       * </pre>
       */
      GET_ALL(10, 78),
      /**
       * <code>EQ = 17;</code>
       *
       * <pre>
       * Simple DATUM Ops
       * </pre>
       */
      EQ(11, 17),
      /**
       * <code>NE = 18;</code>
       *
       * <pre>
       * DATUM... -&gt; BOOL
       * </pre>
       */
      NE(12, 18),
      /**
       * <code>LT = 19;</code>
       *
       * <pre>
       * DATUM... -&gt; BOOL
       * </pre>
       */
      LT(13, 19),
      /**
       * <code>LE = 20;</code>
       *
       * <pre>
       * DATUM... -&gt; BOOL
       * </pre>
       */
      LE(14, 20),
      /**
       * <code>GT = 21;</code>
       *
       * <pre>
       * DATUM... -&gt; BOOL
       * </pre>
       */
      GT(15, 21),
      /**
       * <code>GE = 22;</code>
       *
       * <pre>
       * DATUM... -&gt; BOOL
       * </pre>
       */
      GE(16, 22),
      /**
       * <code>NOT = 23;</code>
       *
       * <pre>
       * BOOL -&gt; BOOL
       * </pre>
       */
      NOT(17, 23),
      /**
       * <code>ADD = 24;</code>
       *
       * <pre>
       * ADD can either add two numbers or concatenate two arrays.
       * </pre>
       */
      ADD(18, 24),
      /**
       * <code>SUB = 25;</code>
       *
       * <pre>
       * NUMBER... -&gt; NUMBER
       * </pre>
       */
      SUB(19, 25),
      /**
       * <code>MUL = 26;</code>
       *
       * <pre>
       * NUMBER... -&gt; NUMBER
       * </pre>
       */
      MUL(20, 26),
      /**
       * <code>DIV = 27;</code>
       *
       * <pre>
       * NUMBER... -&gt; NUMBER
       * </pre>
       */
      DIV(21, 27),
      /**
       * <code>MOD = 28;</code>
       *
       * <pre>
       * NUMBER, NUMBER -&gt; NUMBER
       * </pre>
       */
      MOD(22, 28),
      /**
       * <code>APPEND = 29;</code>
       *
       * <pre>
       * DATUM Array Ops
       * Append a single element to the end of an array (like `snoc`).
       * </pre>
       */
      APPEND(23, 29),
      /**
       * <code>SLICE = 30;</code>
       *
       * <pre>
       * Sequence, NUMBER, NUMBER -&gt; Sequence
       * </pre>
       */
      SLICE(24, 30),
      /**
       * <code>SKIP = 70;</code>
       *
       * <pre>
       * Sequence, NUMBER -&gt; Sequence
       * </pre>
       */
      SKIP(25, 70),
      /**
       * <code>LIMIT = 71;</code>
       *
       * <pre>
       * Sequence, NUMBER -&gt; Sequence
       * </pre>
       */
      LIMIT(26, 71),
      /**
       * <code>GETATTR = 31;</code>
       *
       * <pre>
       * Stream/Object Ops
       * Get a particular attribute out of an object, or map that over a
       * sequence.
       * </pre>
       */
      GETATTR(27, 31),
      /**
       * <code>CONTAINS = 32;</code>
       *
       * <pre>
       * Check whether an object contains all of a set of attributes, or map
       * that over a sequence.
       * </pre>
       */
      CONTAINS(28, 32),
      /**
       * <code>PLUCK = 33;</code>
       *
       * <pre>
       * Get a subset of an object by selecting some attributes to preserve,
       * or map that over a sequence.  (Both pick and pluck, polymorphic.)
       * </pre>
       */
      PLUCK(29, 33),
      /**
       * <code>WITHOUT = 34;</code>
       *
       * <pre>
       * Get a subset of an object by selecting some attributes to discard, or
       * map that over a sequence.  (Both unpick and without, polymorphic.)
       * </pre>
       */
      WITHOUT(30, 34),
      /**
       * <code>MERGE = 35;</code>
       *
       * <pre>
       * Merge objects (right-preferential)
       * </pre>
       */
      MERGE(31, 35),
      /**
       * <code>BETWEEN = 36;</code>
       *
       * <pre>
       * Sequence Ops
       * Get all elements of a sequence between two values.
       * </pre>
       */
      BETWEEN(32, 36),
      /**
       * <code>REDUCE = 37;</code>
       *
       * <pre>
       * Sequence, Function(2), {base:DATUM} -&gt; DATUM
       * </pre>
       */
      REDUCE(33, 37),
      /**
       * <code>MAP = 38;</code>
       *
       * <pre>
       * Sequence, Function(1) -&gt; Sequence
       * </pre>
       */
      MAP(34, 38),
      /**
       * <code>FILTER = 39;</code>
       *
       * <pre>
       * Sequence, Function(1) -&gt; Sequence | Sequence, OBJECT -&gt; Sequence
       * </pre>
       */
      FILTER(35, 39),
      /**
       * <code>CONCATMAP = 40;</code>
       *
       * <pre>
       * Map a function over a sequence and then concatenate the results together.
       * </pre>
       */
      CONCATMAP(36, 40),
      /**
       * <code>ORDERBY = 41;</code>
       *
       * <pre>
       * Order a sequence based on one or more attributes.
       * </pre>
       */
      ORDERBY(37, 41),
      /**
       * <code>DISTINCT = 42;</code>
       *
       * <pre>
       * Get all distinct elements of a sequence (like `uniq`).
       * </pre>
       */
      DISTINCT(38, 42),
      /**
       * <code>COUNT = 43;</code>
       *
       * <pre>
       * Count the number of elements in a sequence.
       * </pre>
       */
      COUNT(39, 43),
      /**
       * <code>UNION = 44;</code>
       *
       * <pre>
       * Take the union of multiple sequences (preserves duplicate elements! (use distinct)).
       * </pre>
       */
      UNION(40, 44),
      /**
       * <code>NTH = 45;</code>
       *
       * <pre>
       * Get the Nth element of a sequence.
       * </pre>
       */
      NTH(41, 45),
      /**
       * <code>GROUPED_MAP_REDUCE = 46;</code>
       *
       * <pre>
       * Takes a sequence, and three functions:
       * - A function to group the sequence by.
       * - A function to map over the groups.
       * - A reduction to apply to each of the groups.
       * </pre>
       */
      GROUPED_MAP_REDUCE(42, 46),
      /**
       * <code>GROUPBY = 47;</code>
       *
       * <pre>
       * Groups a sequence by one or more attributes, and then applies a reduction.
       * The third argument is a special object literal giving the kind of operation to be
       * performed and any necessary arguments.
       * At present, GROUPBY suports the following operations
       * * {'COUNT': &lt;ignored&gt;} - count the size of the group
       * * {'SUM': attr} - sum the values of the given attribute across the group
       * * {'AVG': attr} - average the values of the given attribute across the group
       * </pre>
       */
      GROUPBY(43, 47),
      /**
       * <code>INNER_JOIN = 48;</code>
       *
       * <pre>
       * Sequence, Sequence, Function(2) -&gt; Sequence
       * </pre>
       */
      INNER_JOIN(44, 48),
      /**
       * <code>OUTER_JOIN = 49;</code>
       *
       * <pre>
       * Sequence, Sequence, Function(2) -&gt; Sequence
       * </pre>
       */
      OUTER_JOIN(45, 49),
      /**
       * <code>EQ_JOIN = 50;</code>
       *
       * <pre>
       * An inner-join that does an equality comparison on two attributes.
       * </pre>
       */
      EQ_JOIN(46, 50),
      /**
       * <code>ZIP = 72;</code>
       *
       * <pre>
       * Sequence -&gt; Sequence
       * </pre>
       */
      ZIP(47, 72),
      /**
       * <code>COERCE_TO = 51;</code>
       *
       * <pre>
       * * Type Ops
       * Coerces a datum to a named type (e.g. "bool").
       * If you previously used `stream_to_array`, you should use this instead
       * with the type "array".
       * </pre>
       */
      COERCE_TO(48, 51),
      /**
       * <code>TYPEOF = 52;</code>
       *
       * <pre>
       * Returns the named type of a datum (e.g. TYPEOF(true) = "BOOL")
       * </pre>
       */
      TYPEOF(49, 52),
      /**
       * <code>UPDATE = 53;</code>
       *
       * <pre>
       * * Write Ops (the OBJECTs contain data about number of errors etc.)
       * Updates all the rows in a selection.  Calls its Function with the row
       * to be updated, and then merges the result of that call.
       * </pre>
       */
      UPDATE(50, 53),
      /**
       * <code>DELETE = 54;</code>
       *
       * <pre>
       * SingleSelection, Function(1), {non_atomic:BOOL} -&gt; OBJECT |
       * StreamSelection, OBJECT,      {non_atomic:BOOL} -&gt; OBJECT |
       * SingleSelection, OBJECT,      {non_atomic:BOOL} -&gt; OBJECT
       * Deletes all the rows in a selection.
       * </pre>
       */
      DELETE(51, 54),
      /**
       * <code>REPLACE = 55;</code>
       *
       * <pre>
       * Replaces all the rows in a selection.  Calls its Function with the row
       * to be replaced, and then discards it and stores the result of that
       * call.
       * </pre>
       */
      REPLACE(52, 55),
      /**
       * <code>INSERT = 56;</code>
       *
       * <pre>
       * Inserts into a table.  If `upsert` is true, overwrites entries with
       * the same primary key (otherwise errors).
       * </pre>
       */
      INSERT(53, 56),
      /**
       * <code>DB_CREATE = 57;</code>
       *
       * <pre>
       * * Administrative OPs
       * Creates a database with a particular name.
       * </pre>
       */
      DB_CREATE(54, 57),
      /**
       * <code>DB_DROP = 58;</code>
       *
       * <pre>
       * Drops a database with a particular name.
       * </pre>
       */
      DB_DROP(55, 58),
      /**
       * <code>DB_LIST = 59;</code>
       *
       * <pre>
       * Lists all the databases by name.  (Takes no arguments)
       * </pre>
       */
      DB_LIST(56, 59),
      /**
       * <code>TABLE_CREATE = 60;</code>
       *
       * <pre>
       * Creates a table with a particular name in a particular
       * database.  (You may omit the first argument to use the
       * default database.)
       * </pre>
       */
      TABLE_CREATE(57, 60),
      /**
       * <code>TABLE_DROP = 61;</code>
       *
       * <pre>
       * STRING, {datacenter:STRING, primary_key:STRING, cache_size:NUMBER, hard_durability:BOOL} -&gt; OBJECT
       * Drops a table with a particular name from a particular
       * database.  (You may omit the first argument to use the
       * default database.)
       * </pre>
       */
      TABLE_DROP(58, 61),
      /**
       * <code>TABLE_LIST = 62;</code>
       *
       * <pre>
       * STRING -&gt; OBJECT
       * Lists all the tables in a particular database.  (You may
       * omit the first argument to use the default database.)
       * </pre>
       */
      TABLE_LIST(59, 62),
      /**
       * <code>INDEX_CREATE = 75;</code>
       *
       * <pre>
       * * Secondary indexes OPs
       * Creates a new secondary index with a particular name and definition.
       * </pre>
       */
      INDEX_CREATE(60, 75),
      /**
       * <code>INDEX_DROP = 76;</code>
       *
       * <pre>
       * Drops a secondary index with a particular name from the specified table.
       * </pre>
       */
      INDEX_DROP(61, 76),
      /**
       * <code>INDEX_LIST = 77;</code>
       *
       * <pre>
       * Lists all secondary indexes on a particular table.
       * </pre>
       */
      INDEX_LIST(62, 77),
      /**
       * <code>FUNCALL = 64;</code>
       *
       * <pre>
       * * Control Operators
       * Calls a function on data
       * </pre>
       */
      FUNCALL(63, 64),
      /**
       * <code>BRANCH = 65;</code>
       *
       * <pre>
       * Executes its first argument, and returns its second argument if it
       * got [true] or its third argument if it got [false] (like an `if`
       * statement).
       * </pre>
       */
      BRANCH(64, 65),
      /**
       * <code>ANY = 66;</code>
       *
       * <pre>
       * Returns true if any of its arguments returns true (short-circuits).
       * (Like `or` in most languages.)
       * </pre>
       */
      ANY(65, 66),
      /**
       * <code>ALL = 67;</code>
       *
       * <pre>
       * Returns true if all of its arguments return true (short-circuits).
       * (Like `and` in most languages.)
       * </pre>
       */
      ALL(66, 67),
      /**
       * <code>FOREACH = 68;</code>
       *
       * <pre>
       * Calls its Function with each entry in the sequence
       * and executes the array of terms that Function returns.
       * </pre>
       */
      FOREACH(67, 68),
      /**
       * <code>FUNC = 69;</code>
       *
       * <pre>
       * An anonymous function.  Takes an array of numbers representing
       * variables (see [VAR] above), and a [Term] to execute with those in
       * scope.  Returns a function that may be passed an array of arguments,
       * then executes the Term with those bound to the variable names.  The
       * user will never construct this directly.  We use it internally for
       * things like `map` which take a function.  The "arity" of a [Function] is
       * the number of arguments it takes.
       * For example, here's what `_X_.map{|x| x+2}` turns into:
       * Term {
       *   type = MAP;
       *   args = [_X_,
       *           Term {
       *             type = Function;
       *             args = [Term {
       *                       type = DATUM;
       *                       datum = Datum {
       *                         type = R_ARRAY;
       *                         r_array = [Datum { type = R_NUM; r_num = 1; }];
       *                       };
       *                     },
       *                     Term {
       *                       type = ADD;
       *                       args = [Term {
       *                                 type = VAR;
       *                                 args = [Term {
       *                                           type = DATUM;
       *                                           datum = Datum { type = R_NUM;
       *                                                           r_num = 1};
       *                                         }];
       *                               },
       *                               Term {
       *                                 type = DATUM;
       *                                 datum = Datum { type = R_NUM; r_num = 2; };
       *                               }];
       *                     }];
       *           }];
       * </pre>
       */
      FUNC(68, 69),
      /**
       * <code>ASC = 73;</code>
       *
       * <pre>
       * Indicates to ORDER_BY that this attribute is to be sorted in ascending order.
       * </pre>
       */
      ASC(69, 73),
      /**
       * <code>DESC = 74;</code>
       *
       * <pre>
       * Indicates to ORDER_BY that this attribute is to be sorted in descending order.
       * </pre>
       */
      DESC(70, 74),
      /**
       * <code>INFO = 79;</code>
       *
       * <pre>
       * Gets info about anything.  INFO is most commonly called on tables.
       * </pre>
       */
      INFO(71, 79),
      ;

      /**
       * <code>DATUM = 1;</code>
       *
       * <pre>
       * A RQL datum, stored in `datum` below.
       * </pre>
       */
      public static final int DATUM_VALUE = 1;
      /**
       * <code>MAKE_ARRAY = 2;</code>
       *
       * <pre>
       * DATUM... -&gt; ARRAY
       * </pre>
       */
      public static final int MAKE_ARRAY_VALUE = 2;
      /**
       * <code>MAKE_OBJ = 3;</code>
       *
       * <pre>
       * Evaluate the terms in [optargs] and make an object
       * </pre>
       */
      public static final int MAKE_OBJ_VALUE = 3;
      /**
       * <code>VAR = 10;</code>
       *
       * <pre>
       * * Compound types
       * Takes an integer representing a variable and returns the value stored
       * in that variable.  It's the responsibility of the client to translate
       * from their local representation of a variable to a unique integer for
       * that variable.  (We do it this way instead of letting clients provide
       * variable names as strings to discourage variable-capturing client
       * libraries, and because it's more efficient on the wire.)
       * </pre>
       */
      public static final int VAR_VALUE = 10;
      /**
       * <code>JAVASCRIPT = 11;</code>
       *
       * <pre>
       * Takes some javascript code and executes it.
       * </pre>
       */
      public static final int JAVASCRIPT_VALUE = 11;
      /**
       * <code>ERROR = 12;</code>
       *
       * <pre>
       * STRING {timeout: !NUMBER} -&gt; Function(*)
       * Takes a string and throws an error with that message.
       * </pre>
       */
      public static final int ERROR_VALUE = 12;
      /**
       * <code>IMPLICIT_VAR = 13;</code>
       *
       * <pre>
       * Takes nothing and returns a reference to the implicit variable.
       * </pre>
       */
      public static final int IMPLICIT_VAR_VALUE = 13;
      /**
       * <code>DB = 14;</code>
       *
       * <pre>
       * * Data Operators
       * Returns a reference to a database.
       * </pre>
       */
      public static final int DB_VALUE = 14;
      /**
       * <code>TABLE = 15;</code>
       *
       * <pre>
       * Returns a reference to a table.
       * </pre>
       */
      public static final int TABLE_VALUE = 15;
      /**
       * <code>GET = 16;</code>
       *
       * <pre>
       * Gets a single element from a table by its primary or a secondary key.
       * </pre>
       */
      public static final int GET_VALUE = 16;
      /**
       * <code>GET_ALL = 78;</code>
       *
       * <pre>
       * Table, STRING -&gt; NULL            | Table, NUMBER -&gt; NULL |
       * </pre>
       */
      public static final int GET_ALL_VALUE = 78;
      /**
       * <code>EQ = 17;</code>
       *
       * <pre>
       * Simple DATUM Ops
       * </pre>
       */
      public static final int EQ_VALUE = 17;
      /**
       * <code>NE = 18;</code>
       *
       * <pre>
       * DATUM... -&gt; BOOL
       * </pre>
       */
      public static final int NE_VALUE = 18;
      /**
       * <code>LT = 19;</code>
       *
       * <pre>
       * DATUM... -&gt; BOOL
       * </pre>
       */
      public static final int LT_VALUE = 19;
      /**
       * <code>LE = 20;</code>
       *
       * <pre>
       * DATUM... -&gt; BOOL
       * </pre>
       */
      public static final int LE_VALUE = 20;
      /**
       * <code>GT = 21;</code>
       *
       * <pre>
       * DATUM... -&gt; BOOL
       * </pre>
       */
      public static final int GT_VALUE = 21;
      /**
       * <code>GE = 22;</code>
       *
       * <pre>
       * DATUM... -&gt; BOOL
       * </pre>
       */
      public static final int GE_VALUE = 22;
      /**
       * <code>NOT = 23;</code>
       *
       * <pre>
       * BOOL -&gt; BOOL
       * </pre>
       */
      public static final int NOT_VALUE = 23;
      /**
       * <code>ADD = 24;</code>
       *
       * <pre>
       * ADD can either add two numbers or concatenate two arrays.
       * </pre>
       */
      public static final int ADD_VALUE = 24;
      /**
       * <code>SUB = 25;</code>
       *
       * <pre>
       * NUMBER... -&gt; NUMBER
       * </pre>
       */
      public static final int SUB_VALUE = 25;
      /**
       * <code>MUL = 26;</code>
       *
       * <pre>
       * NUMBER... -&gt; NUMBER
       * </pre>
       */
      public static final int MUL_VALUE = 26;
      /**
       * <code>DIV = 27;</code>
       *
       * <pre>
       * NUMBER... -&gt; NUMBER
       * </pre>
       */
      public static final int DIV_VALUE = 27;
      /**
       * <code>MOD = 28;</code>
       *
       * <pre>
       * NUMBER, NUMBER -&gt; NUMBER
       * </pre>
       */
      public static final int MOD_VALUE = 28;
      /**
       * <code>APPEND = 29;</code>
       *
       * <pre>
       * DATUM Array Ops
       * Append a single element to the end of an array (like `snoc`).
       * </pre>
       */
      public static final int APPEND_VALUE = 29;
      /**
       * <code>SLICE = 30;</code>
       *
       * <pre>
       * Sequence, NUMBER, NUMBER -&gt; Sequence
       * </pre>
       */
      public static final int SLICE_VALUE = 30;
      /**
       * <code>SKIP = 70;</code>
       *
       * <pre>
       * Sequence, NUMBER -&gt; Sequence
       * </pre>
       */
      public static final int SKIP_VALUE = 70;
      /**
       * <code>LIMIT = 71;</code>
       *
       * <pre>
       * Sequence, NUMBER -&gt; Sequence
       * </pre>
       */
      public static final int LIMIT_VALUE = 71;
      /**
       * <code>GETATTR = 31;</code>
       *
       * <pre>
       * Stream/Object Ops
       * Get a particular attribute out of an object, or map that over a
       * sequence.
       * </pre>
       */
      public static final int GETATTR_VALUE = 31;
      /**
       * <code>CONTAINS = 32;</code>
       *
       * <pre>
       * Check whether an object contains all of a set of attributes, or map
       * that over a sequence.
       * </pre>
       */
      public static final int CONTAINS_VALUE = 32;
      /**
       * <code>PLUCK = 33;</code>
       *
       * <pre>
       * Get a subset of an object by selecting some attributes to preserve,
       * or map that over a sequence.  (Both pick and pluck, polymorphic.)
       * </pre>
       */
      public static final int PLUCK_VALUE = 33;
      /**
       * <code>WITHOUT = 34;</code>
       *
       * <pre>
       * Get a subset of an object by selecting some attributes to discard, or
       * map that over a sequence.  (Both unpick and without, polymorphic.)
       * </pre>
       */
      public static final int WITHOUT_VALUE = 34;
      /**
       * <code>MERGE = 35;</code>
       *
       * <pre>
       * Merge objects (right-preferential)
       * </pre>
       */
      public static final int MERGE_VALUE = 35;
      /**
       * <code>BETWEEN = 36;</code>
       *
       * <pre>
       * Sequence Ops
       * Get all elements of a sequence between two values.
       * </pre>
       */
      public static final int BETWEEN_VALUE = 36;
      /**
       * <code>REDUCE = 37;</code>
       *
       * <pre>
       * Sequence, Function(2), {base:DATUM} -&gt; DATUM
       * </pre>
       */
      public static final int REDUCE_VALUE = 37;
      /**
       * <code>MAP = 38;</code>
       *
       * <pre>
       * Sequence, Function(1) -&gt; Sequence
       * </pre>
       */
      public static final int MAP_VALUE = 38;
      /**
       * <code>FILTER = 39;</code>
       *
       * <pre>
       * Sequence, Function(1) -&gt; Sequence | Sequence, OBJECT -&gt; Sequence
       * </pre>
       */
      public static final int FILTER_VALUE = 39;
      /**
       * <code>CONCATMAP = 40;</code>
       *
       * <pre>
       * Map a function over a sequence and then concatenate the results together.
       * </pre>
       */
      public static final int CONCATMAP_VALUE = 40;
      /**
       * <code>ORDERBY = 41;</code>
       *
       * <pre>
       * Order a sequence based on one or more attributes.
       * </pre>
       */
      public static final int ORDERBY_VALUE = 41;
      /**
       * <code>DISTINCT = 42;</code>
       *
       * <pre>
       * Get all distinct elements of a sequence (like `uniq`).
       * </pre>
       */
      public static final int DISTINCT_VALUE = 42;
      /**
       * <code>COUNT = 43;</code>
       *
       * <pre>
       * Count the number of elements in a sequence.
       * </pre>
       */
      public static final int COUNT_VALUE = 43;
      /**
       * <code>UNION = 44;</code>
       *
       * <pre>
       * Take the union of multiple sequences (preserves duplicate elements! (use distinct)).
       * </pre>
       */
      public static final int UNION_VALUE = 44;
      /**
       * <code>NTH = 45;</code>
       *
       * <pre>
       * Get the Nth element of a sequence.
       * </pre>
       */
      public static final int NTH_VALUE = 45;
      /**
       * <code>GROUPED_MAP_REDUCE = 46;</code>
       *
       * <pre>
       * Takes a sequence, and three functions:
       * - A function to group the sequence by.
       * - A function to map over the groups.
       * - A reduction to apply to each of the groups.
       * </pre>
       */
      public static final int GROUPED_MAP_REDUCE_VALUE = 46;
      /**
       * <code>GROUPBY = 47;</code>
       *
       * <pre>
       * Groups a sequence by one or more attributes, and then applies a reduction.
       * The third argument is a special object literal giving the kind of operation to be
       * performed and any necessary arguments.
       * At present, GROUPBY suports the following operations
       * * {'COUNT': &lt;ignored&gt;} - count the size of the group
       * * {'SUM': attr} - sum the values of the given attribute across the group
       * * {'AVG': attr} - average the values of the given attribute across the group
       * </pre>
       */
      public static final int GROUPBY_VALUE = 47;
      /**
       * <code>INNER_JOIN = 48;</code>
       *
       * <pre>
       * Sequence, Sequence, Function(2) -&gt; Sequence
       * </pre>
       */
      public static final int INNER_JOIN_VALUE = 48;
      /**
       * <code>OUTER_JOIN = 49;</code>
       *
       * <pre>
       * Sequence, Sequence, Function(2) -&gt; Sequence
       * </pre>
       */
      public static final int OUTER_JOIN_VALUE = 49;
      /**
       * <code>EQ_JOIN = 50;</code>
       *
       * <pre>
       * An inner-join that does an equality comparison on two attributes.
       * </pre>
       */
      public static final int EQ_JOIN_VALUE = 50;
      /**
       * <code>ZIP = 72;</code>
       *
       * <pre>
       * Sequence -&gt; Sequence
       * </pre>
       */
      public static final int ZIP_VALUE = 72;
      /**
       * <code>COERCE_TO = 51;</code>
       *
       * <pre>
       * * Type Ops
       * Coerces a datum to a named type (e.g. "bool").
       * If you previously used `stream_to_array`, you should use this instead
       * with the type "array".
       * </pre>
       */
      public static final int COERCE_TO_VALUE = 51;
      /**
       * <code>TYPEOF = 52;</code>
       *
       * <pre>
       * Returns the named type of a datum (e.g. TYPEOF(true) = "BOOL")
       * </pre>
       */
      public static final int TYPEOF_VALUE = 52;
      /**
       * <code>UPDATE = 53;</code>
       *
       * <pre>
       * * Write Ops (the OBJECTs contain data about number of errors etc.)
       * Updates all the rows in a selection.  Calls its Function with the row
       * to be updated, and then merges the result of that call.
       * </pre>
       */
      public static final int UPDATE_VALUE = 53;
      /**
       * <code>DELETE = 54;</code>
       *
       * <pre>
       * SingleSelection, Function(1), {non_atomic:BOOL} -&gt; OBJECT |
       * StreamSelection, OBJECT,      {non_atomic:BOOL} -&gt; OBJECT |
       * SingleSelection, OBJECT,      {non_atomic:BOOL} -&gt; OBJECT
       * Deletes all the rows in a selection.
       * </pre>
       */
      public static final int DELETE_VALUE = 54;
      /**
       * <code>REPLACE = 55;</code>
       *
       * <pre>
       * Replaces all the rows in a selection.  Calls its Function with the row
       * to be replaced, and then discards it and stores the result of that
       * call.
       * </pre>
       */
      public static final int REPLACE_VALUE = 55;
      /**
       * <code>INSERT = 56;</code>
       *
       * <pre>
       * Inserts into a table.  If `upsert` is true, overwrites entries with
       * the same primary key (otherwise errors).
       * </pre>
       */
      public static final int INSERT_VALUE = 56;
      /**
       * <code>DB_CREATE = 57;</code>
       *
       * <pre>
       * * Administrative OPs
       * Creates a database with a particular name.
       * </pre>
       */
      public static final int DB_CREATE_VALUE = 57;
      /**
       * <code>DB_DROP = 58;</code>
       *
       * <pre>
       * Drops a database with a particular name.
       * </pre>
       */
      public static final int DB_DROP_VALUE = 58;
      /**
       * <code>DB_LIST = 59;</code>
       *
       * <pre>
       * Lists all the databases by name.  (Takes no arguments)
       * </pre>
       */
      public static final int DB_LIST_VALUE = 59;
      /**
       * <code>TABLE_CREATE = 60;</code>
       *
       * <pre>
       * Creates a table with a particular name in a particular
       * database.  (You may omit the first argument to use the
       * default database.)
       * </pre>
       */
      public static final int TABLE_CREATE_VALUE = 60;
      /**
       * <code>TABLE_DROP = 61;</code>
       *
       * <pre>
       * STRING, {datacenter:STRING, primary_key:STRING, cache_size:NUMBER, hard_durability:BOOL} -&gt; OBJECT
       * Drops a table with a particular name from a particular
       * database.  (You may omit the first argument to use the
       * default database.)
       * </pre>
       */
      public static final int TABLE_DROP_VALUE = 61;
      /**
       * <code>TABLE_LIST = 62;</code>
       *
       * <pre>
       * STRING -&gt; OBJECT
       * Lists all the tables in a particular database.  (You may
       * omit the first argument to use the default database.)
       * </pre>
       */
      public static final int TABLE_LIST_VALUE = 62;
      /**
       * <code>INDEX_CREATE = 75;</code>
       *
       * <pre>
       * * Secondary indexes OPs
       * Creates a new secondary index with a particular name and definition.
       * </pre>
       */
      public static final int INDEX_CREATE_VALUE = 75;
      /**
       * <code>INDEX_DROP = 76;</code>
       *
       * <pre>
       * Drops a secondary index with a particular name from the specified table.
       * </pre>
       */
      public static final int INDEX_DROP_VALUE = 76;
      /**
       * <code>INDEX_LIST = 77;</code>
       *
       * <pre>
       * Lists all secondary indexes on a particular table.
       * </pre>
       */
      public static final int INDEX_LIST_VALUE = 77;
      /**
       * <code>FUNCALL = 64;</code>
       *
       * <pre>
       * * Control Operators
       * Calls a function on data
       * </pre>
       */
      public static final int FUNCALL_VALUE = 64;
      /**
       * <code>BRANCH = 65;</code>
       *
       * <pre>
       * Executes its first argument, and returns its second argument if it
       * got [true] or its third argument if it got [false] (like an `if`
       * statement).
       * </pre>
       */
      public static final int BRANCH_VALUE = 65;
      /**
       * <code>ANY = 66;</code>
       *
       * <pre>
       * Returns true if any of its arguments returns true (short-circuits).
       * (Like `or` in most languages.)
       * </pre>
       */
      public static final int ANY_VALUE = 66;
      /**
       * <code>ALL = 67;</code>
       *
       * <pre>
       * Returns true if all of its arguments return true (short-circuits).
       * (Like `and` in most languages.)
       * </pre>
       */
      public static final int ALL_VALUE = 67;
      /**
       * <code>FOREACH = 68;</code>
       *
       * <pre>
       * Calls its Function with each entry in the sequence
       * and executes the array of terms that Function returns.
       * </pre>
       */
      public static final int FOREACH_VALUE = 68;
      /**
       * <code>FUNC = 69;</code>
       *
       * <pre>
       * An anonymous function.  Takes an array of numbers representing
       * variables (see [VAR] above), and a [Term] to execute with those in
       * scope.  Returns a function that may be passed an array of arguments,
       * then executes the Term with those bound to the variable names.  The
       * user will never construct this directly.  We use it internally for
       * things like `map` which take a function.  The "arity" of a [Function] is
       * the number of arguments it takes.
       * For example, here's what `_X_.map{|x| x+2}` turns into:
       * Term {
       *   type = MAP;
       *   args = [_X_,
       *           Term {
       *             type = Function;
       *             args = [Term {
       *                       type = DATUM;
       *                       datum = Datum {
       *                         type = R_ARRAY;
       *                         r_array = [Datum { type = R_NUM; r_num = 1; }];
       *                       };
       *                     },
       *                     Term {
       *                       type = ADD;
       *                       args = [Term {
       *                                 type = VAR;
       *                                 args = [Term {
       *                                           type = DATUM;
       *                                           datum = Datum { type = R_NUM;
       *                                                           r_num = 1};
       *                                         }];
       *                               },
       *                               Term {
       *                                 type = DATUM;
       *                                 datum = Datum { type = R_NUM; r_num = 2; };
       *                               }];
       *                     }];
       *           }];
       * </pre>
       */
      public static final int FUNC_VALUE = 69;
      /**
       * <code>ASC = 73;</code>
       *
       * <pre>
       * Indicates to ORDER_BY that this attribute is to be sorted in ascending order.
       * </pre>
       */
      public static final int ASC_VALUE = 73;
      /**
       * <code>DESC = 74;</code>
       *
       * <pre>
       * Indicates to ORDER_BY that this attribute is to be sorted in descending order.
       * </pre>
       */
      public static final int DESC_VALUE = 74;
      /**
       * <code>INFO = 79;</code>
       *
       * <pre>
       * Gets info about anything.  INFO is most commonly called on tables.
       * </pre>
       */
      public static final int INFO_VALUE = 79;


      public final int getNumber() { return value; }

      public static TermType valueOf(int value) {
        switch (value) {
          case 1: return DATUM;
          case 2: return MAKE_ARRAY;
          case 3: return MAKE_OBJ;
          case 10: return VAR;
          case 11: return JAVASCRIPT;
          case 12: return ERROR;
          case 13: return IMPLICIT_VAR;
          case 14: return DB;
          case 15: return TABLE;
          case 16: return GET;
          case 78: return GET_ALL;
          case 17: return EQ;
          case 18: return NE;
          case 19: return LT;
          case 20: return LE;
          case 21: return GT;
          case 22: return GE;
          case 23: return NOT;
          case 24: return ADD;
          case 25: return SUB;
          case 26: return MUL;
          case 27: return DIV;
          case 28: return MOD;
          case 29: return APPEND;
          case 30: return SLICE;
          case 70: return SKIP;
          case 71: return LIMIT;
          case 31: return GETATTR;
          case 32: return CONTAINS;
          case 33: return PLUCK;
          case 34: return WITHOUT;
          case 35: return MERGE;
          case 36: return BETWEEN;
          case 37: return REDUCE;
          case 38: return MAP;
          case 39: return FILTER;
          case 40: return CONCATMAP;
          case 41: return ORDERBY;
          case 42: return DISTINCT;
          case 43: return COUNT;
          case 44: return UNION;
          case 45: return NTH;
          case 46: return GROUPED_MAP_REDUCE;
          case 47: return GROUPBY;
          case 48: return INNER_JOIN;
          case 49: return OUTER_JOIN;
          case 50: return EQ_JOIN;
          case 72: return ZIP;
          case 51: return COERCE_TO;
          case 52: return TYPEOF;
          case 53: return UPDATE;
          case 54: return DELETE;
          case 55: return REPLACE;
          case 56: return INSERT;
          case 57: return DB_CREATE;
          case 58: return DB_DROP;
          case 59: return DB_LIST;
          case 60: return TABLE_CREATE;
          case 61: return TABLE_DROP;
          case 62: return TABLE_LIST;
          case 75: return INDEX_CREATE;
          case 76: return INDEX_DROP;
          case 77: return INDEX_LIST;
          case 64: return FUNCALL;
          case 65: return BRANCH;
          case 66: return ANY;
          case 67: return ALL;
          case 68: return FOREACH;
          case 69: return FUNC;
          case 73: return ASC;
          case 74: return DESC;
          case 79: return INFO;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TermType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<TermType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TermType>() {
              public TermType findValueByNumber(int number) {
                return TermType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.rethinkdb.QL2.Term.getDescriptor().getEnumTypes().get(0);
      }

      private static final TermType[] VALUES = values();

      public static TermType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private TermType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:Term.TermType)
    }

    public interface AssocPairOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional string key = 1;
      /**
       * <code>optional string key = 1;</code>
       */
      boolean hasKey();
      /**
       * <code>optional string key = 1;</code>
       */
      java.lang.String getKey();
      /**
       * <code>optional string key = 1;</code>
       */
      com.google.protobuf.ByteString
          getKeyBytes();

      // optional .Term val = 2;
      /**
       * <code>optional .Term val = 2;</code>
       */
      boolean hasVal();
      /**
       * <code>optional .Term val = 2;</code>
       */
      com.rethinkdb.QL2.Term getVal();
      /**
       * <code>optional .Term val = 2;</code>
       */
      com.rethinkdb.QL2.TermOrBuilder getValOrBuilder();
    }
    /**
     * Protobuf type {@code Term.AssocPair}
     */
    public static final class AssocPair extends
        com.google.protobuf.GeneratedMessage
        implements AssocPairOrBuilder {
      // Use AssocPair.newBuilder() to construct.
      private AssocPair(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AssocPair(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AssocPair defaultInstance;
      public static AssocPair getDefaultInstance() {
        return defaultInstance;
      }

      public AssocPair getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AssocPair(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                key_ = input.readBytes();
                break;
              }
              case 18: {
                com.rethinkdb.QL2.Term.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = val_.toBuilder();
                }
                val_ = input.readMessage(com.rethinkdb.QL2.Term.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(val_);
                  val_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.rethinkdb.QL2.internal_static_Term_AssocPair_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.rethinkdb.QL2.internal_static_Term_AssocPair_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.rethinkdb.QL2.Term.AssocPair.class, com.rethinkdb.QL2.Term.AssocPair.Builder.class);
      }

      public static com.google.protobuf.Parser<AssocPair> PARSER =
          new com.google.protobuf.AbstractParser<AssocPair>() {
        public AssocPair parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AssocPair(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AssocPair> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional string key = 1;
      public static final int KEY_FIELD_NUMBER = 1;
      private java.lang.Object key_;
      /**
       * <code>optional string key = 1;</code>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string key = 1;</code>
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            key_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string key = 1;</code>
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // optional .Term val = 2;
      public static final int VAL_FIELD_NUMBER = 2;
      private com.rethinkdb.QL2.Term val_;
      /**
       * <code>optional .Term val = 2;</code>
       */
      public boolean hasVal() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .Term val = 2;</code>
       */
      public com.rethinkdb.QL2.Term getVal() {
        return val_;
      }
      /**
       * <code>optional .Term val = 2;</code>
       */
      public com.rethinkdb.QL2.TermOrBuilder getValOrBuilder() {
        return val_;
      }

      private void initFields() {
        key_ = "";
        val_ = com.rethinkdb.QL2.Term.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (hasVal()) {
          if (!getVal().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getKeyBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, val_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getKeyBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, val_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.rethinkdb.QL2.Term.AssocPair parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.rethinkdb.QL2.Term.AssocPair parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.rethinkdb.QL2.Term.AssocPair parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.rethinkdb.QL2.Term.AssocPair parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.rethinkdb.QL2.Term.AssocPair parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.rethinkdb.QL2.Term.AssocPair parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.rethinkdb.QL2.Term.AssocPair parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.rethinkdb.QL2.Term.AssocPair parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.rethinkdb.QL2.Term.AssocPair parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.rethinkdb.QL2.Term.AssocPair parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.rethinkdb.QL2.Term.AssocPair prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code Term.AssocPair}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.rethinkdb.QL2.Term.AssocPairOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.rethinkdb.QL2.internal_static_Term_AssocPair_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.rethinkdb.QL2.internal_static_Term_AssocPair_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.rethinkdb.QL2.Term.AssocPair.class, com.rethinkdb.QL2.Term.AssocPair.Builder.class);
        }

        // Construct using com.rethinkdb.QL2.Term.AssocPair.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getValFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          key_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          if (valBuilder_ == null) {
            val_ = com.rethinkdb.QL2.Term.getDefaultInstance();
          } else {
            valBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.rethinkdb.QL2.internal_static_Term_AssocPair_descriptor;
        }

        public com.rethinkdb.QL2.Term.AssocPair getDefaultInstanceForType() {
          return com.rethinkdb.QL2.Term.AssocPair.getDefaultInstance();
        }

        public com.rethinkdb.QL2.Term.AssocPair build() {
          com.rethinkdb.QL2.Term.AssocPair result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.rethinkdb.QL2.Term.AssocPair buildPartial() {
          com.rethinkdb.QL2.Term.AssocPair result = new com.rethinkdb.QL2.Term.AssocPair(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.key_ = key_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (valBuilder_ == null) {
            result.val_ = val_;
          } else {
            result.val_ = valBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.rethinkdb.QL2.Term.AssocPair) {
            return mergeFrom((com.rethinkdb.QL2.Term.AssocPair)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.rethinkdb.QL2.Term.AssocPair other) {
          if (other == com.rethinkdb.QL2.Term.AssocPair.getDefaultInstance()) return this;
          if (other.hasKey()) {
            bitField0_ |= 0x00000001;
            key_ = other.key_;
            onChanged();
          }
          if (other.hasVal()) {
            mergeVal(other.getVal());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasVal()) {
            if (!getVal().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.rethinkdb.QL2.Term.AssocPair parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.rethinkdb.QL2.Term.AssocPair) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional string key = 1;
        private java.lang.Object key_ = "";
        /**
         * <code>optional string key = 1;</code>
         */
        public boolean hasKey() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string key = 1;</code>
         */
        public java.lang.String getKey() {
          java.lang.Object ref = key_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            key_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string key = 1;</code>
         */
        public com.google.protobuf.ByteString
            getKeyBytes() {
          java.lang.Object ref = key_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            key_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string key = 1;</code>
         */
        public Builder setKey(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          key_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string key = 1;</code>
         */
        public Builder clearKey() {
          bitField0_ = (bitField0_ & ~0x00000001);
          key_ = getDefaultInstance().getKey();
          onChanged();
          return this;
        }
        /**
         * <code>optional string key = 1;</code>
         */
        public Builder setKeyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          key_ = value;
          onChanged();
          return this;
        }

        // optional .Term val = 2;
        private com.rethinkdb.QL2.Term val_ = com.rethinkdb.QL2.Term.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            com.rethinkdb.QL2.Term, com.rethinkdb.QL2.Term.Builder, com.rethinkdb.QL2.TermOrBuilder> valBuilder_;
        /**
         * <code>optional .Term val = 2;</code>
         */
        public boolean hasVal() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .Term val = 2;</code>
         */
        public com.rethinkdb.QL2.Term getVal() {
          if (valBuilder_ == null) {
            return val_;
          } else {
            return valBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .Term val = 2;</code>
         */
        public Builder setVal(com.rethinkdb.QL2.Term value) {
          if (valBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            val_ = value;
            onChanged();
          } else {
            valBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .Term val = 2;</code>
         */
        public Builder setVal(
            com.rethinkdb.QL2.Term.Builder builderForValue) {
          if (valBuilder_ == null) {
            val_ = builderForValue.build();
            onChanged();
          } else {
            valBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .Term val = 2;</code>
         */
        public Builder mergeVal(com.rethinkdb.QL2.Term value) {
          if (valBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                val_ != com.rethinkdb.QL2.Term.getDefaultInstance()) {
              val_ =
                com.rethinkdb.QL2.Term.newBuilder(val_).mergeFrom(value).buildPartial();
            } else {
              val_ = value;
            }
            onChanged();
          } else {
            valBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .Term val = 2;</code>
         */
        public Builder clearVal() {
          if (valBuilder_ == null) {
            val_ = com.rethinkdb.QL2.Term.getDefaultInstance();
            onChanged();
          } else {
            valBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .Term val = 2;</code>
         */
        public com.rethinkdb.QL2.Term.Builder getValBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getValFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .Term val = 2;</code>
         */
        public com.rethinkdb.QL2.TermOrBuilder getValOrBuilder() {
          if (valBuilder_ != null) {
            return valBuilder_.getMessageOrBuilder();
          } else {
            return val_;
          }
        }
        /**
         * <code>optional .Term val = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.rethinkdb.QL2.Term, com.rethinkdb.QL2.Term.Builder, com.rethinkdb.QL2.TermOrBuilder> 
            getValFieldBuilder() {
          if (valBuilder_ == null) {
            valBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.rethinkdb.QL2.Term, com.rethinkdb.QL2.Term.Builder, com.rethinkdb.QL2.TermOrBuilder>(
                    val_,
                    getParentForChildren(),
                    isClean());
            val_ = null;
          }
          return valBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:Term.AssocPair)
      }

      static {
        defaultInstance = new AssocPair(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:Term.AssocPair)
    }

    private int bitField0_;
    // optional .Term.TermType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private com.rethinkdb.QL2.Term.TermType type_;
    /**
     * <code>optional .Term.TermType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .Term.TermType type = 1;</code>
     */
    public com.rethinkdb.QL2.Term.TermType getType() {
      return type_;
    }

    // optional .Datum datum = 2;
    public static final int DATUM_FIELD_NUMBER = 2;
    private com.rethinkdb.QL2.Datum datum_;
    /**
     * <code>optional .Datum datum = 2;</code>
     *
     * <pre>
     * This is only used when type is DATUM.
     * </pre>
     */
    public boolean hasDatum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .Datum datum = 2;</code>
     *
     * <pre>
     * This is only used when type is DATUM.
     * </pre>
     */
    public com.rethinkdb.QL2.Datum getDatum() {
      return datum_;
    }
    /**
     * <code>optional .Datum datum = 2;</code>
     *
     * <pre>
     * This is only used when type is DATUM.
     * </pre>
     */
    public com.rethinkdb.QL2.DatumOrBuilder getDatumOrBuilder() {
      return datum_;
    }

    // repeated .Term args = 3;
    public static final int ARGS_FIELD_NUMBER = 3;
    private java.util.List<com.rethinkdb.QL2.Term> args_;
    /**
     * <code>repeated .Term args = 3;</code>
     *
     * <pre>
     * Holds the positional arguments of the query.
     * </pre>
     */
    public java.util.List<com.rethinkdb.QL2.Term> getArgsList() {
      return args_;
    }
    /**
     * <code>repeated .Term args = 3;</code>
     *
     * <pre>
     * Holds the positional arguments of the query.
     * </pre>
     */
    public java.util.List<? extends com.rethinkdb.QL2.TermOrBuilder> 
        getArgsOrBuilderList() {
      return args_;
    }
    /**
     * <code>repeated .Term args = 3;</code>
     *
     * <pre>
     * Holds the positional arguments of the query.
     * </pre>
     */
    public int getArgsCount() {
      return args_.size();
    }
    /**
     * <code>repeated .Term args = 3;</code>
     *
     * <pre>
     * Holds the positional arguments of the query.
     * </pre>
     */
    public com.rethinkdb.QL2.Term getArgs(int index) {
      return args_.get(index);
    }
    /**
     * <code>repeated .Term args = 3;</code>
     *
     * <pre>
     * Holds the positional arguments of the query.
     * </pre>
     */
    public com.rethinkdb.QL2.TermOrBuilder getArgsOrBuilder(
        int index) {
      return args_.get(index);
    }

    // repeated .Term.AssocPair optargs = 4;
    public static final int OPTARGS_FIELD_NUMBER = 4;
    private java.util.List<com.rethinkdb.QL2.Term.AssocPair> optargs_;
    /**
     * <code>repeated .Term.AssocPair optargs = 4;</code>
     *
     * <pre>
     * Holds the optional arguments of the query.
     * </pre>
     */
    public java.util.List<com.rethinkdb.QL2.Term.AssocPair> getOptargsList() {
      return optargs_;
    }
    /**
     * <code>repeated .Term.AssocPair optargs = 4;</code>
     *
     * <pre>
     * Holds the optional arguments of the query.
     * </pre>
     */
    public java.util.List<? extends com.rethinkdb.QL2.Term.AssocPairOrBuilder> 
        getOptargsOrBuilderList() {
      return optargs_;
    }
    /**
     * <code>repeated .Term.AssocPair optargs = 4;</code>
     *
     * <pre>
     * Holds the optional arguments of the query.
     * </pre>
     */
    public int getOptargsCount() {
      return optargs_.size();
    }
    /**
     * <code>repeated .Term.AssocPair optargs = 4;</code>
     *
     * <pre>
     * Holds the optional arguments of the query.
     * </pre>
     */
    public com.rethinkdb.QL2.Term.AssocPair getOptargs(int index) {
      return optargs_.get(index);
    }
    /**
     * <code>repeated .Term.AssocPair optargs = 4;</code>
     *
     * <pre>
     * Holds the optional arguments of the query.
     * </pre>
     */
    public com.rethinkdb.QL2.Term.AssocPairOrBuilder getOptargsOrBuilder(
        int index) {
      return optargs_.get(index);
    }

    private void initFields() {
      type_ = com.rethinkdb.QL2.Term.TermType.DATUM;
      datum_ = com.rethinkdb.QL2.Datum.getDefaultInstance();
      args_ = java.util.Collections.emptyList();
      optargs_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (hasDatum()) {
        if (!getDatum().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getArgsCount(); i++) {
        if (!getArgs(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getOptargsCount(); i++) {
        if (!getOptargs(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<com.rethinkdb.QL2.Term>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, datum_);
      }
      for (int i = 0; i < args_.size(); i++) {
        output.writeMessage(3, args_.get(i));
      }
      for (int i = 0; i < optargs_.size(); i++) {
        output.writeMessage(4, optargs_.get(i));
      }
      extensionWriter.writeUntil(20001, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, datum_);
      }
      for (int i = 0; i < args_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, args_.get(i));
      }
      for (int i = 0; i < optargs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, optargs_.get(i));
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.rethinkdb.QL2.Term parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.rethinkdb.QL2.Term parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Term parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.rethinkdb.QL2.Term parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Term parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.rethinkdb.QL2.Term parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Term parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.rethinkdb.QL2.Term parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.rethinkdb.QL2.Term parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.rethinkdb.QL2.Term parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.rethinkdb.QL2.Term prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Term}
     *
     * <pre>
     * A [Term] is either a piece of data (see **Datum** above), or an operator and
     * its operands.  If you have a [Datum], it's stored in the member [datum].  If
     * you have an operator, its positional arguments are stored in [args] and its
     * optional arguments are stored in [optargs].
     *
     * A note about type signatures:
     * We use the following notation to denote types:
     *   arg1_type, arg2_type, argrest_type... -&gt; result_type
     * So, for example, if we have a function `avg` that takes any number of
     * arguments and averages them, we might write:
     *   NUMBER... -&gt; NUMBER
     * Or if we had a function that took one number modulo another:
     *   NUMBER, NUMBER -&gt; NUMBER
     * Or a function that takes a table and a primary key of any Datum type, then
     * retrieves the entry with that primary key:
     *   Table, DATUM -&gt; OBJECT
     * Some arguments must be provided as literal values (and not the results of sub
     * terms).  These are marked with a `!`.
     * Optional arguments are specified within curly braces as argname `:` value
     * type (e.x `{use_outdated:BOOL}`)
     * Many RQL operations are polymorphic. For these, alterantive type signatures
     * are separated by `|`.
     *
     * The RQL type hierarchy is as follows:
     *   Top
     *     DATUM
     *       NULL
     *       BOOL
     *       NUMBER
     *       STRING
     *       OBJECT
     *         SingleSelection
     *       ARRAY
     *     Sequence
     *       ARRAY
     *       Stream
     *         StreamSelection
     *           Table
     *     Database
     *     Function
     *     Ordering - used only by ORDER_BY
     *   Error
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          com.rethinkdb.QL2.Term, Builder> implements com.rethinkdb.QL2.TermOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.rethinkdb.QL2.internal_static_Term_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.rethinkdb.QL2.internal_static_Term_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.rethinkdb.QL2.Term.class, com.rethinkdb.QL2.Term.Builder.class);
      }

      // Construct using com.rethinkdb.QL2.Term.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDatumFieldBuilder();
          getArgsFieldBuilder();
          getOptargsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = com.rethinkdb.QL2.Term.TermType.DATUM;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (datumBuilder_ == null) {
          datum_ = com.rethinkdb.QL2.Datum.getDefaultInstance();
        } else {
          datumBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          argsBuilder_.clear();
        }
        if (optargsBuilder_ == null) {
          optargs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          optargsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.rethinkdb.QL2.internal_static_Term_descriptor;
      }

      public com.rethinkdb.QL2.Term getDefaultInstanceForType() {
        return com.rethinkdb.QL2.Term.getDefaultInstance();
      }

      public com.rethinkdb.QL2.Term build() {
        com.rethinkdb.QL2.Term result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.rethinkdb.QL2.Term buildPartial() {
        com.rethinkdb.QL2.Term result = new com.rethinkdb.QL2.Term(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (datumBuilder_ == null) {
          result.datum_ = datum_;
        } else {
          result.datum_ = datumBuilder_.build();
        }
        if (argsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            args_ = java.util.Collections.unmodifiableList(args_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.args_ = args_;
        } else {
          result.args_ = argsBuilder_.build();
        }
        if (optargsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            optargs_ = java.util.Collections.unmodifiableList(optargs_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.optargs_ = optargs_;
        } else {
          result.optargs_ = optargsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.rethinkdb.QL2.Term) {
          return mergeFrom((com.rethinkdb.QL2.Term)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.rethinkdb.QL2.Term other) {
        if (other == com.rethinkdb.QL2.Term.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasDatum()) {
          mergeDatum(other.getDatum());
        }
        if (argsBuilder_ == null) {
          if (!other.args_.isEmpty()) {
            if (args_.isEmpty()) {
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureArgsIsMutable();
              args_.addAll(other.args_);
            }
            onChanged();
          }
        } else {
          if (!other.args_.isEmpty()) {
            if (argsBuilder_.isEmpty()) {
              argsBuilder_.dispose();
              argsBuilder_ = null;
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000004);
              argsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getArgsFieldBuilder() : null;
            } else {
              argsBuilder_.addAllMessages(other.args_);
            }
          }
        }
        if (optargsBuilder_ == null) {
          if (!other.optargs_.isEmpty()) {
            if (optargs_.isEmpty()) {
              optargs_ = other.optargs_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureOptargsIsMutable();
              optargs_.addAll(other.optargs_);
            }
            onChanged();
          }
        } else {
          if (!other.optargs_.isEmpty()) {
            if (optargsBuilder_.isEmpty()) {
              optargsBuilder_.dispose();
              optargsBuilder_ = null;
              optargs_ = other.optargs_;
              bitField0_ = (bitField0_ & ~0x00000008);
              optargsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOptargsFieldBuilder() : null;
            } else {
              optargsBuilder_.addAllMessages(other.optargs_);
            }
          }
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasDatum()) {
          if (!getDatum().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getArgsCount(); i++) {
          if (!getArgs(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getOptargsCount(); i++) {
          if (!getOptargs(i).isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.rethinkdb.QL2.Term parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.rethinkdb.QL2.Term) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .Term.TermType type = 1;
      private com.rethinkdb.QL2.Term.TermType type_ = com.rethinkdb.QL2.Term.TermType.DATUM;
      /**
       * <code>optional .Term.TermType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .Term.TermType type = 1;</code>
       */
      public com.rethinkdb.QL2.Term.TermType getType() {
        return type_;
      }
      /**
       * <code>optional .Term.TermType type = 1;</code>
       */
      public Builder setType(com.rethinkdb.QL2.Term.TermType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .Term.TermType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.rethinkdb.QL2.Term.TermType.DATUM;
        onChanged();
        return this;
      }

      // optional .Datum datum = 2;
      private com.rethinkdb.QL2.Datum datum_ = com.rethinkdb.QL2.Datum.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.rethinkdb.QL2.Datum, com.rethinkdb.QL2.Datum.Builder, com.rethinkdb.QL2.DatumOrBuilder> datumBuilder_;
      /**
       * <code>optional .Datum datum = 2;</code>
       *
       * <pre>
       * This is only used when type is DATUM.
       * </pre>
       */
      public boolean hasDatum() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .Datum datum = 2;</code>
       *
       * <pre>
       * This is only used when type is DATUM.
       * </pre>
       */
      public com.rethinkdb.QL2.Datum getDatum() {
        if (datumBuilder_ == null) {
          return datum_;
        } else {
          return datumBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .Datum datum = 2;</code>
       *
       * <pre>
       * This is only used when type is DATUM.
       * </pre>
       */
      public Builder setDatum(com.rethinkdb.QL2.Datum value) {
        if (datumBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          datum_ = value;
          onChanged();
        } else {
          datumBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .Datum datum = 2;</code>
       *
       * <pre>
       * This is only used when type is DATUM.
       * </pre>
       */
      public Builder setDatum(
          com.rethinkdb.QL2.Datum.Builder builderForValue) {
        if (datumBuilder_ == null) {
          datum_ = builderForValue.build();
          onChanged();
        } else {
          datumBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .Datum datum = 2;</code>
       *
       * <pre>
       * This is only used when type is DATUM.
       * </pre>
       */
      public Builder mergeDatum(com.rethinkdb.QL2.Datum value) {
        if (datumBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              datum_ != com.rethinkdb.QL2.Datum.getDefaultInstance()) {
            datum_ =
              com.rethinkdb.QL2.Datum.newBuilder(datum_).mergeFrom(value).buildPartial();
          } else {
            datum_ = value;
          }
          onChanged();
        } else {
          datumBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .Datum datum = 2;</code>
       *
       * <pre>
       * This is only used when type is DATUM.
       * </pre>
       */
      public Builder clearDatum() {
        if (datumBuilder_ == null) {
          datum_ = com.rethinkdb.QL2.Datum.getDefaultInstance();
          onChanged();
        } else {
          datumBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .Datum datum = 2;</code>
       *
       * <pre>
       * This is only used when type is DATUM.
       * </pre>
       */
      public com.rethinkdb.QL2.Datum.Builder getDatumBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getDatumFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Datum datum = 2;</code>
       *
       * <pre>
       * This is only used when type is DATUM.
       * </pre>
       */
      public com.rethinkdb.QL2.DatumOrBuilder getDatumOrBuilder() {
        if (datumBuilder_ != null) {
          return datumBuilder_.getMessageOrBuilder();
        } else {
          return datum_;
        }
      }
      /**
       * <code>optional .Datum datum = 2;</code>
       *
       * <pre>
       * This is only used when type is DATUM.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.rethinkdb.QL2.Datum, com.rethinkdb.QL2.Datum.Builder, com.rethinkdb.QL2.DatumOrBuilder> 
          getDatumFieldBuilder() {
        if (datumBuilder_ == null) {
          datumBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.rethinkdb.QL2.Datum, com.rethinkdb.QL2.Datum.Builder, com.rethinkdb.QL2.DatumOrBuilder>(
                  datum_,
                  getParentForChildren(),
                  isClean());
          datum_ = null;
        }
        return datumBuilder_;
      }

      // repeated .Term args = 3;
      private java.util.List<com.rethinkdb.QL2.Term> args_ =
        java.util.Collections.emptyList();
      private void ensureArgsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          args_ = new java.util.ArrayList<com.rethinkdb.QL2.Term>(args_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.rethinkdb.QL2.Term, com.rethinkdb.QL2.Term.Builder, com.rethinkdb.QL2.TermOrBuilder> argsBuilder_;

      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public java.util.List<com.rethinkdb.QL2.Term> getArgsList() {
        if (argsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(args_);
        } else {
          return argsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public int getArgsCount() {
        if (argsBuilder_ == null) {
          return args_.size();
        } else {
          return argsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public com.rethinkdb.QL2.Term getArgs(int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);
        } else {
          return argsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public Builder setArgs(
          int index, com.rethinkdb.QL2.Term value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.set(index, value);
          onChanged();
        } else {
          argsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public Builder setArgs(
          int index, com.rethinkdb.QL2.Term.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.set(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public Builder addArgs(com.rethinkdb.QL2.Term value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(value);
          onChanged();
        } else {
          argsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public Builder addArgs(
          int index, com.rethinkdb.QL2.Term value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(index, value);
          onChanged();
        } else {
          argsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public Builder addArgs(
          com.rethinkdb.QL2.Term.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public Builder addArgs(
          int index, com.rethinkdb.QL2.Term.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public Builder addAllArgs(
          java.lang.Iterable<? extends com.rethinkdb.QL2.Term> values) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          super.addAll(values, args_);
          onChanged();
        } else {
          argsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public Builder clearArgs() {
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          argsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public Builder removeArgs(int index) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.remove(index);
          onChanged();
        } else {
          argsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public com.rethinkdb.QL2.Term.Builder getArgsBuilder(
          int index) {
        return getArgsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public com.rethinkdb.QL2.TermOrBuilder getArgsOrBuilder(
          int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);  } else {
          return argsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public java.util.List<? extends com.rethinkdb.QL2.TermOrBuilder> 
           getArgsOrBuilderList() {
        if (argsBuilder_ != null) {
          return argsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(args_);
        }
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public com.rethinkdb.QL2.Term.Builder addArgsBuilder() {
        return getArgsFieldBuilder().addBuilder(
            com.rethinkdb.QL2.Term.getDefaultInstance());
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public com.rethinkdb.QL2.Term.Builder addArgsBuilder(
          int index) {
        return getArgsFieldBuilder().addBuilder(
            index, com.rethinkdb.QL2.Term.getDefaultInstance());
      }
      /**
       * <code>repeated .Term args = 3;</code>
       *
       * <pre>
       * Holds the positional arguments of the query.
       * </pre>
       */
      public java.util.List<com.rethinkdb.QL2.Term.Builder> 
           getArgsBuilderList() {
        return getArgsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.rethinkdb.QL2.Term, com.rethinkdb.QL2.Term.Builder, com.rethinkdb.QL2.TermOrBuilder> 
          getArgsFieldBuilder() {
        if (argsBuilder_ == null) {
          argsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.rethinkdb.QL2.Term, com.rethinkdb.QL2.Term.Builder, com.rethinkdb.QL2.TermOrBuilder>(
                  args_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          args_ = null;
        }
        return argsBuilder_;
      }

      // repeated .Term.AssocPair optargs = 4;
      private java.util.List<com.rethinkdb.QL2.Term.AssocPair> optargs_ =
        java.util.Collections.emptyList();
      private void ensureOptargsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          optargs_ = new java.util.ArrayList<com.rethinkdb.QL2.Term.AssocPair>(optargs_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.rethinkdb.QL2.Term.AssocPair, com.rethinkdb.QL2.Term.AssocPair.Builder, com.rethinkdb.QL2.Term.AssocPairOrBuilder> optargsBuilder_;

      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public java.util.List<com.rethinkdb.QL2.Term.AssocPair> getOptargsList() {
        if (optargsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(optargs_);
        } else {
          return optargsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public int getOptargsCount() {
        if (optargsBuilder_ == null) {
          return optargs_.size();
        } else {
          return optargsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public com.rethinkdb.QL2.Term.AssocPair getOptargs(int index) {
        if (optargsBuilder_ == null) {
          return optargs_.get(index);
        } else {
          return optargsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public Builder setOptargs(
          int index, com.rethinkdb.QL2.Term.AssocPair value) {
        if (optargsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOptargsIsMutable();
          optargs_.set(index, value);
          onChanged();
        } else {
          optargsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public Builder setOptargs(
          int index, com.rethinkdb.QL2.Term.AssocPair.Builder builderForValue) {
        if (optargsBuilder_ == null) {
          ensureOptargsIsMutable();
          optargs_.set(index, builderForValue.build());
          onChanged();
        } else {
          optargsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public Builder addOptargs(com.rethinkdb.QL2.Term.AssocPair value) {
        if (optargsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOptargsIsMutable();
          optargs_.add(value);
          onChanged();
        } else {
          optargsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public Builder addOptargs(
          int index, com.rethinkdb.QL2.Term.AssocPair value) {
        if (optargsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOptargsIsMutable();
          optargs_.add(index, value);
          onChanged();
        } else {
          optargsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public Builder addOptargs(
          com.rethinkdb.QL2.Term.AssocPair.Builder builderForValue) {
        if (optargsBuilder_ == null) {
          ensureOptargsIsMutable();
          optargs_.add(builderForValue.build());
          onChanged();
        } else {
          optargsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public Builder addOptargs(
          int index, com.rethinkdb.QL2.Term.AssocPair.Builder builderForValue) {
        if (optargsBuilder_ == null) {
          ensureOptargsIsMutable();
          optargs_.add(index, builderForValue.build());
          onChanged();
        } else {
          optargsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public Builder addAllOptargs(
          java.lang.Iterable<? extends com.rethinkdb.QL2.Term.AssocPair> values) {
        if (optargsBuilder_ == null) {
          ensureOptargsIsMutable();
          super.addAll(values, optargs_);
          onChanged();
        } else {
          optargsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public Builder clearOptargs() {
        if (optargsBuilder_ == null) {
          optargs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          optargsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public Builder removeOptargs(int index) {
        if (optargsBuilder_ == null) {
          ensureOptargsIsMutable();
          optargs_.remove(index);
          onChanged();
        } else {
          optargsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public com.rethinkdb.QL2.Term.AssocPair.Builder getOptargsBuilder(
          int index) {
        return getOptargsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public com.rethinkdb.QL2.Term.AssocPairOrBuilder getOptargsOrBuilder(
          int index) {
        if (optargsBuilder_ == null) {
          return optargs_.get(index);  } else {
          return optargsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public java.util.List<? extends com.rethinkdb.QL2.Term.AssocPairOrBuilder> 
           getOptargsOrBuilderList() {
        if (optargsBuilder_ != null) {
          return optargsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(optargs_);
        }
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public com.rethinkdb.QL2.Term.AssocPair.Builder addOptargsBuilder() {
        return getOptargsFieldBuilder().addBuilder(
            com.rethinkdb.QL2.Term.AssocPair.getDefaultInstance());
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public com.rethinkdb.QL2.Term.AssocPair.Builder addOptargsBuilder(
          int index) {
        return getOptargsFieldBuilder().addBuilder(
            index, com.rethinkdb.QL2.Term.AssocPair.getDefaultInstance());
      }
      /**
       * <code>repeated .Term.AssocPair optargs = 4;</code>
       *
       * <pre>
       * Holds the optional arguments of the query.
       * </pre>
       */
      public java.util.List<com.rethinkdb.QL2.Term.AssocPair.Builder> 
           getOptargsBuilderList() {
        return getOptargsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.rethinkdb.QL2.Term.AssocPair, com.rethinkdb.QL2.Term.AssocPair.Builder, com.rethinkdb.QL2.Term.AssocPairOrBuilder> 
          getOptargsFieldBuilder() {
        if (optargsBuilder_ == null) {
          optargsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.rethinkdb.QL2.Term.AssocPair, com.rethinkdb.QL2.Term.AssocPair.Builder, com.rethinkdb.QL2.Term.AssocPairOrBuilder>(
                  optargs_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          optargs_ = null;
        }
        return optargsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:Term)
    }

    static {
      defaultInstance = new Term(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Term)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_VersionDummy_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_VersionDummy_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Query_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Query_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Query_AssocPair_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Query_AssocPair_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Frame_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Frame_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Backtrace_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Backtrace_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Response_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Response_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Datum_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Datum_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Datum_AssocPair_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Datum_AssocPair_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Term_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Term_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Term_AssocPair_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Term_AssocPair_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\tql2.proto\"\'\n\014VersionDummy\"\027\n\007Version\022\014" +
      "\n\004V0_1\020\266\364\206\373\003\"\365\001\n\005Query\022\036\n\004type\030\001 \001(\0162\020.Q" +
      "uery.QueryType\022\024\n\005query\030\002 \001(\0132\005.Term\022\r\n\005" +
      "token\030\003 \001(\003\022\037\n\020OBSOLETE_noreply\030\004 \001(\010:\005f" +
      "alse\022(\n\016global_optargs\030\006 \003(\0132\020.Query.Ass" +
      "ocPair\032,\n\tAssocPair\022\013\n\003key\030\001 \001(\t\022\022\n\003val\030" +
      "\002 \001(\0132\005.Term\".\n\tQueryType\022\t\n\005START\020\001\022\014\n\010" +
      "CONTINUE\020\002\022\010\n\004STOP\020\003\"`\n\005Frame\022\036\n\004type\030\001 " +
      "\001(\0162\020.Frame.FrameType\022\013\n\003pos\030\002 \001(\003\022\013\n\003op" +
      "t\030\003 \001(\t\"\035\n\tFrameType\022\007\n\003POS\020\001\022\007\n\003OPT\020\002\"#",
      "\n\tBacktrace\022\026\n\006frames\030\001 \003(\0132\006.Frame\"\376\001\n\010" +
      "Response\022$\n\004type\030\001 \001(\0162\026.Response.Respon" +
      "seType\022\r\n\005token\030\002 \001(\003\022\030\n\010response\030\003 \003(\0132" +
      "\006.Datum\022\035\n\tbacktrace\030\004 \001(\0132\n.Backtrace\"\203" +
      "\001\n\014ResponseType\022\020\n\014SUCCESS_ATOM\020\001\022\024\n\020SUC" +
      "CESS_SEQUENCE\020\002\022\023\n\017SUCCESS_PARTIAL\020\003\022\020\n\014" +
      "CLIENT_ERROR\020\020\022\021\n\rCOMPILE_ERROR\020\021\022\021\n\rRUN" +
      "TIME_ERROR\020\022\"\240\002\n\005Datum\022\036\n\004type\030\001 \001(\0162\020.D" +
      "atum.DatumType\022\016\n\006r_bool\030\002 \001(\010\022\r\n\005r_num\030" +
      "\003 \001(\001\022\r\n\005r_str\030\004 \001(\t\022\027\n\007r_array\030\005 \003(\0132\006.",
      "Datum\022\"\n\010r_object\030\006 \003(\0132\020.Datum.AssocPai" +
      "r\032-\n\tAssocPair\022\013\n\003key\030\001 \001(\t\022\023\n\003val\030\002 \001(\013" +
      "2\006.Datum\"T\n\tDatumType\022\n\n\006R_NULL\020\001\022\n\n\006R_B" +
      "OOL\020\002\022\t\n\005R_NUM\020\003\022\t\n\005R_STR\020\004\022\013\n\007R_ARRAY\020\005" +
      "\022\014\n\010R_OBJECT\020\006*\007\010\220N\020\241\234\001\"\230\010\n\004Term\022\034\n\004type" +
      "\030\001 \001(\0162\016.Term.TermType\022\025\n\005datum\030\002 \001(\0132\006." +
      "Datum\022\023\n\004args\030\003 \003(\0132\005.Term\022 \n\007optargs\030\004 " +
      "\003(\0132\017.Term.AssocPair\032,\n\tAssocPair\022\013\n\003key" +
      "\030\001 \001(\t\022\022\n\003val\030\002 \001(\0132\005.Term\"\354\006\n\010TermType\022" +
      "\t\n\005DATUM\020\001\022\016\n\nMAKE_ARRAY\020\002\022\014\n\010MAKE_OBJ\020\003",
      "\022\007\n\003VAR\020\n\022\016\n\nJAVASCRIPT\020\013\022\t\n\005ERROR\020\014\022\020\n\014" +
      "IMPLICIT_VAR\020\r\022\006\n\002DB\020\016\022\t\n\005TABLE\020\017\022\007\n\003GET" +
      "\020\020\022\013\n\007GET_ALL\020N\022\006\n\002EQ\020\021\022\006\n\002NE\020\022\022\006\n\002LT\020\023\022" +
      "\006\n\002LE\020\024\022\006\n\002GT\020\025\022\006\n\002GE\020\026\022\007\n\003NOT\020\027\022\007\n\003ADD\020" +
      "\030\022\007\n\003SUB\020\031\022\007\n\003MUL\020\032\022\007\n\003DIV\020\033\022\007\n\003MOD\020\034\022\n\n" +
      "\006APPEND\020\035\022\t\n\005SLICE\020\036\022\010\n\004SKIP\020F\022\t\n\005LIMIT\020" +
      "G\022\013\n\007GETATTR\020\037\022\014\n\010CONTAINS\020 \022\t\n\005PLUCK\020!\022" +
      "\013\n\007WITHOUT\020\"\022\t\n\005MERGE\020#\022\013\n\007BETWEEN\020$\022\n\n\006" +
      "REDUCE\020%\022\007\n\003MAP\020&\022\n\n\006FILTER\020\'\022\r\n\tCONCATM" +
      "AP\020(\022\013\n\007ORDERBY\020)\022\014\n\010DISTINCT\020*\022\t\n\005COUNT",
      "\020+\022\t\n\005UNION\020,\022\007\n\003NTH\020-\022\026\n\022GROUPED_MAP_RE" +
      "DUCE\020.\022\013\n\007GROUPBY\020/\022\016\n\nINNER_JOIN\0200\022\016\n\nO" +
      "UTER_JOIN\0201\022\013\n\007EQ_JOIN\0202\022\007\n\003ZIP\020H\022\r\n\tCOE" +
      "RCE_TO\0203\022\n\n\006TYPEOF\0204\022\n\n\006UPDATE\0205\022\n\n\006DELE" +
      "TE\0206\022\013\n\007REPLACE\0207\022\n\n\006INSERT\0208\022\r\n\tDB_CREA" +
      "TE\0209\022\013\n\007DB_DROP\020:\022\013\n\007DB_LIST\020;\022\020\n\014TABLE_" +
      "CREATE\020<\022\016\n\nTABLE_DROP\020=\022\016\n\nTABLE_LIST\020>" +
      "\022\020\n\014INDEX_CREATE\020K\022\016\n\nINDEX_DROP\020L\022\016\n\nIN" +
      "DEX_LIST\020M\022\013\n\007FUNCALL\020@\022\n\n\006BRANCH\020A\022\007\n\003A" +
      "NY\020B\022\007\n\003ALL\020C\022\013\n\007FOREACH\020D\022\010\n\004FUNC\020E\022\007\n\003",
      "ASC\020I\022\010\n\004DESC\020J\022\010\n\004INFO\020O*\007\010\220N\020\241\234\001B\024\n\rco" +
      "m.rethinkdbB\003QL2"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_VersionDummy_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_VersionDummy_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_VersionDummy_descriptor,
              new java.lang.String[] { });
          internal_static_Query_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_Query_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Query_descriptor,
              new java.lang.String[] { "Type", "Query", "Token", "OBSOLETENoreply", "GlobalOptargs", });
          internal_static_Query_AssocPair_descriptor =
            internal_static_Query_descriptor.getNestedTypes().get(0);
          internal_static_Query_AssocPair_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Query_AssocPair_descriptor,
              new java.lang.String[] { "Key", "Val", });
          internal_static_Frame_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_Frame_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Frame_descriptor,
              new java.lang.String[] { "Type", "Pos", "Opt", });
          internal_static_Backtrace_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_Backtrace_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Backtrace_descriptor,
              new java.lang.String[] { "Frames", });
          internal_static_Response_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_Response_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Response_descriptor,
              new java.lang.String[] { "Type", "Token", "Response", "Backtrace", });
          internal_static_Datum_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_Datum_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Datum_descriptor,
              new java.lang.String[] { "Type", "RBool", "RNum", "RStr", "RArray", "RObject", });
          internal_static_Datum_AssocPair_descriptor =
            internal_static_Datum_descriptor.getNestedTypes().get(0);
          internal_static_Datum_AssocPair_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Datum_AssocPair_descriptor,
              new java.lang.String[] { "Key", "Val", });
          internal_static_Term_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_Term_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Term_descriptor,
              new java.lang.String[] { "Type", "Datum", "Args", "Optargs", });
          internal_static_Term_AssocPair_descriptor =
            internal_static_Term_descriptor.getNestedTypes().get(0);
          internal_static_Term_AssocPair_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Term_AssocPair_descriptor,
              new java.lang.String[] { "Key", "Val", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
